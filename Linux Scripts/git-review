#!/usr/bin/env ruby


require 'rubygems'
require "trollop"
require "open3"
include Open3

opts = Trollop::options do
  
  banner <<-EOS
Creates a review object on a commit


EOS

  opt :amend, "Change the last review committed"
  opt :log, "Display log history for all reviews done" 
  opt :respond, "Respond to a review"
  opt :show_raw, "Display raw review contents"
  opt :show_comments, "Displays the list of comments in a review object"
   opt :log_show, "Displays the log history for all reviews along with the raw content"
   opt :format, "Prepare reviews for email submissions"
end

          
              
          if opts[:amend] ==true
		
	        review_amend=`git review-amend`
                puts review_amend
                exit
               
           elsif opts[:log]==true
                
           
		review_log=`git review-log`
                puts review_log
                exit 
               
          elsif opts[:format]==true
                
           
                if ARGV.length ==0
                 puts " --format needs a review hash. Check git review --help"
                 exit
                end
               
                review_format = ARGV[0] 
               
		format =`git review-format #{review_format}`
                print format
                exit 
		
               
            elsif opts[:log_show]==true
                
		review_log_show=`git review-log-show`
                puts review_log_show
                exit
                
           elsif opts[:show_comments]==true
               

                if ARGV.length ==0
                 puts " --show-comments needs a review hash. Check git review --help"
                 exit
                end
               
                review_comments = ARGV[0] 
               
		review_comments=`git comment #{review_comments}`
                print review_comments
                exit 

            elsif opts[:show_raw]==true
            
                if ARGV.length ==0
                 puts " --show-raw needs a review hash. Check git review --help"
                 exit
                end
               
                review_raw = ARGV[0]
              
                get_tree = `git show #{review_raw}`
                tree_hash= get_tree.lines.first
                tree_hash= tree_hash.split[1] 
                
                reviewer_details = `git log -1 review  -- #{tree_hash}/#{review_raw}` 
                puts "Commit Reviewed: #{tree_hash}"
                print "Reviewer"
                puts reviewer_details[54..-1]
                review_show_raw= %x(git cat-file -p #{review_raw})
                puts review_show_raw
                 
                exit

            elsif opts[:respond]==true
              
		 if ARGV.length ==0
                 puts " --respond needs a review hash. Check git review --help"
                 exit
                end
               
                review_respond = ARGV[0]  
                get_tree = `git show #{review_respond}`
                tree_hash= get_tree.lines.first
                tree_hash= tree_hash.split[1] 
                
                response=`git show #{review_respond}`
                response.gsub!(/^/, ">")           #putting in chevrons at the beginning of every line
		 
		File.open('/tmp/review.tmp', 'w') { |file| file.write(response) }
		%x{gvim #{'/tmp/review.tmp'}}
                create_review = "git hash-object -w /tmp/review.tmp"
		review_hash_respond = `#{create_review}`
		review_hash_respond = review_hash_respond.strip
		puts "Creating Response Review Object"
		puts review_hash_respond
               
 


                 tree_contents_respond= `git ls-tree review:#{tree_hash}` 
	         tree_contents_respond = tree_contents_respond + "100644 blob #{review_hash_respond}\t#{review_hash_respond}"
     
    		 stdin6, stdout6, stderr6 = Open3.popen3("git mktree")
     		 stdin6.write tree_contents_respond
     		 stdin6.close
     		 tree_hashT2_respond = stdout6.read().strip
              
                 checkreviewcontents = `git ls-tree review  `
  
  		checkreviewcontents= checkreviewcontents.split("\n").map {|row| row.split()}
  		matched_rowindex=checkreviewcontents.find_index {|row| row[3]==tree_hash}
  		checkreviewcontents[matched_rowindex][2]= tree_hashT2_respond
  		tree_contentsT1=checkreviewcontents.map{|line| line[0..2].join(" ") + "\t" + line[3]}.join "\n"
  		stdin7, stdout7, stderr7 = Open3.popen3("git mktree")
  		stdin7.write tree_contentsT1
  		stdin7.close
  
  		tree_hashT1 = stdout7.read()

               commit_message= "Response to #{review_respond}"
  		stdin13,stdout13, stderr13 = Open3.popen3("git commit-tree #{tree_hashT1} -p review ")
    		stdin13.write commit_message
   		stdin13.close
  		 commit_treeT1 = stdout13.read()
   
  		commit_treeT1 = commit_treeT1.strip
  		createreviewbranch = ` git branch -f review #{commit_treeT1}`
      
	        exit

                 
                
           end

if ARGV.length == 1 
  commit_hash = ARGV[0]
  cmd = "git log -u -1 #{commit_hash}"
else
  cmd = "git diff "
  
end
  
  value = `#{cmd}`
 
  
if value.length==0
  puts " Review object cannot be created. Check git review --help "
  exit
end


   
value.gsub!(/^/, ">")           #putting in chevrons at the beginning of every line
puts 
File.open('/tmp/review.tmp', 'w') { |file| file.write(value) }
%x{gvim #{'/tmp/review.tmp'}}
create_review = "git hash-object -w /tmp/review.tmp"
review_hash = `#{create_review}`
review_hash = review_hash.strip
puts "Creating Review Object"
puts review_hash
   


check_tree = `git ls-tree review`
t="100644 blob #{review_hash}\t#{review_hash}"



#A - making a review for the first time

if check_tree.length==0
  
  stdin, stdout, stderr = Open3.popen3("git mktree")
  stdin.write t
  stdin.close
  tree_hashT2A = stdout.read().strip
  
  stdout.close
  
  
  createT1A = "040000 tree #{tree_hashT2A}\t#{commit_hash}\n"
  stdin1, stdout1, stderr1 = Open3.popen3("git mktree")
  stdin1.write createT1A
  stdin1.close
  tree_hashT1A = stdout1.read()
  
  commit_message= "This is the first review on any commit"
  stdin10,stdout10, stderr10 = Open3.popen3("git commit-tree #{tree_hashT1A}")
   stdin10.write commit_message
   stdin10.close
   commit_treeT1A = stdout10.read()
   commit_treeT1A = commit_treeT1A.strip
   createreviewbranch = ` git branch -f review #{commit_treeT1A}`


#B making a review on a new commit
 else
   
  checkcontents = `git ls-tree review | grep #{commit_hash} `
 
  if checkcontents.length==0
  
  stdin2, stdout2, stderr2 = Open3.popen3("git mktree")
  stdin2.write t
  stdin2.close
  tree_hashT2B = stdout2.read().strip
  stdout2.close

  check_tree = check_tree + "040000 tree #{tree_hashT2B}\t#{commit_hash}"
  stdin3, stdout3, stderr3 = Open3.popen3("git mktree")
  stdin3.write check_tree
  stdin3.close
  
  tree_hashT1B = stdout3.read()
  tree_hashT1B=tree_hashT1B.strip
  stderr3.read()

  commit_message= "This is a first review on this commit"
  stdin11,stdout11, stderr11 = Open3.popen3("git commit-tree #{tree_hashT1B} -p review ")
   stdin11.write commit_message
   stdin11.close
   commit_treeT1B = stdout11.read()
   commit_treeT1B = commit_treeT1B.strip
   createreviewbranch = ` git branch -f review #{commit_treeT1B}`
  
     

  
#C making a multiple review on same commit
  else
     
     tree_contents= `git ls-tree review:#{commit_hash}` 
     tree_contents = tree_contents + "100644 blob #{review_hash}\t#{review_hash}"
     
     stdin4, stdout4, stderr4 = Open3.popen3("git mktree")
     stdin4.write tree_contents
     stdin4.close
     tree_hashT2C = stdout4.read().strip
  

  checkreviewcontents = `git ls-tree review  `
  
  checkreviewcontents= checkreviewcontents.split("\n").map {|row| row.split()}
  matched_rowindex=checkreviewcontents.find_index {|row| row[3]==commit_hash}
  checkreviewcontents[matched_rowindex][2]= tree_hashT2C
  tree_contentsT1C=checkreviewcontents.map{|line| line[0..2].join(" ") + "\t" + line[3]}.join "\n"
  stdin5, stdout5, stderr5 = Open3.popen3("git mktree")
  stdin5.write tree_contentsT1C
  stdin5.close
  
  tree_hashT1C = stdout5.read()

  
  tree_hashT1C=tree_hashT1C.strip
  commit_message= "This commit has been reviewed before"
  stdin12,stdout12, stderr12 = Open3.popen3("git commit-tree #{tree_hashT1C} -p review ")
   stdin12.write commit_message
   stdin12.close
   commit_treeT1C = stdout12.read()
   
   commit_treeT1C = commit_treeT1C.strip
   createreviewbranch = ` git branch -f review #{commit_treeT1C}`

  
      

end   
end   


 
