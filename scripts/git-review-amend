#!/usr/bin/env ruby



require 'rubygems'
require "trollop"
require "open3"
include Open3

review_log = `git review-log`

review_log = review_log.split(/\n/)[1]

review_hash = review_log.split[1]      
puts review_hash
                  
cmd = `git show #{review_hash}`
tree_hash= cmd.lines.first
tree_hash= tree_hash.split[1]             #Getting the tree the review belongs to
puts tree_hash
   
value = `git show #{review_hash}`
File.open('C:\Users\Murtuza\murtuza9\review.tmp', 'w') { |file| file.write(value) }
%x{call #{'C:\Users\Murtuza\murtuza9\review.tmp'}}


cmd2 = "git hash-object -w review.tmp"     #Making changes to the review hash
amended_hash = `#{cmd2}`                   #Getting the new review hash
amended_hash = amended_hash.strip
print "Amending Review Object"
puts
print amended_hash
puts


#check and replace the old review with new review and create a new T2 out of it

checkcontents = `git ls-tree review:#{tree_hash}`
checkcontents = checkcontents + "100644 blob #{amended_hash}\t#{amended_hash}"
stdin, stdout, stderr = Open3.popen3("git mktree")
stdin.write checkcontents
stdin.close
tree_hashT2 = stdout.read().strip
 

#check and replace the old tree with the new tree created above

checkreviewcontents = `git ls-tree review  `
checkreviewcontents= checkreviewcontents.split("\n").map {|row| row.split()}
matched_rowindex=checkreviewcontents.find_index {|row| row[3]==tree_hash}
checkreviewcontents[matched_rowindex][2]= tree_hashT2
tree_contentsT1=checkreviewcontents.map{|line| line[0..2].join(" ") + "\t" + line[3]}.join "\n"

stdin2, stdout2, stderr2 = Open3.popen3("git mktree")
stdin2.write tree_contentsT1
stdin2.close 
tree_hashT1 = stdout2.read()


commit_treeT1 = `git commit-tree -m "Amended Review #{review_hash}" -p review #{tree_hashT1}`  
commit_treeT1 = commit_treeT1.strip
createreviewbranch = ` git branch -f review #{commit_treeT1}`