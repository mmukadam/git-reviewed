#!/usr/bin/env ruby
require 'rubygems'
require "open3"
include Open3



def make_review_mbox
	stdin, stdout, stderr = Open3.popen3("git hash-object -w /tmp/data.tmp")
        review_hash = stdout.read().strip
        error = stderr.read()
  
        if error.length !=0
          exit
        end
	
	puts "#{review_hash}"
        return review_hash
 
end    



def create_treeT2(t)
	
 	stdin, stdout, stderr = Open3.popen3("git mktree")
  	stdin.write t
  	stdin.close
  	tree_hashT2 = stdout.read().strip
  	stdout.close
	return tree_hashT2
end


def create_treeT1(createT1)
	
	
  	stdin, stdout, stderr = Open3.popen3("git mktree")
  	stdin.write createT1
  	stdin.close
  	tree_hashT1 = stdout.read().strip
        return tree_hashT1
end

def commit_tree(tree_hashT1,commit_message,command)
  	stdin,stdout, stderr = Open3.popen3(command)
   	stdin.write commit_message
   	stdin.close
   	commit_treeT1 = stdout.read()
   	commit_treeT1 = commit_treeT1.strip
   	createreviewbranch = ` git branch -f review #{commit_treeT1}`
end

def search(commit_hash,tree_hashT2)

	checkreviewcontents = `git ls-tree review  `
  	checkreviewcontents= checkreviewcontents.split("\n").map {|row| row.split()}
  	matched_rowindex=checkreviewcontents.find_index {|row| row[3]==commit_hash}
  	checkreviewcontents[matched_rowindex][2]= tree_hashT2
  	tree_contentsT1=checkreviewcontents.map{|line| line[0..2].join(" ") + "\t" + line[3]}.join "\n"
        return tree_contentsT1
  end 	



commit_hash = ARGV[0]
commit_hash = commit_hash.strip
if commit_hash == "not match"
  exit

else
review_hash = make_review_mbox() 
review_hash = review_hash.strip 
end

author = `git log -1 --pretty=%an #{commit_hash}`
author_email = `git log -1 --pretty=%ae #{commit_hash}`
author_date = `git log -1 --pretty=%ad #{commit_hash}`
committer = ARGV[1]
committer_date = ARGV[2]
committer_email = ARGV[3]
subject = ARGV[4]
ENV['GIT_AUTHOR_NAME'] = author
ENV['GIT_COMMITTER_NAME'] = committer
ENV['GIT_COMMITTER_EMAIL'] = committer_email
ENV['GIT_COMMITTER_DATE'] = committer_date
ENV['GIT_AUTHOR_EMAIL'] = author_email
ENV['GIT_AUTHOR_DATE'] = author_date

stdin, stdout, stderr = Open3.popen3("git ls-tree review")
check_tree = stdout.read()
error = stderr.read()
if review_hash == "2fe4a4bc65696389334ae07ead241c8ff0d36597" || review_hash== "4eebc6749a67517ce788fd864c38222a7144b841" || review_hash == "bab091a6154df0ccd9570709ac4665bc9e9e7a9a" || review_hash == "701e9f17e77cb2237d9998f7f8b9eef4a4fdb4ac"
exit
end
t="100644 blob #{review_hash}\t#{review_hash}"



#A - making a review for the first time

 if check_tree.length==0
  
  tree_hashT2A = create_treeT2(t)
  createT1A = "040000 tree #{tree_hashT2A}\t#{commit_hash}\n"
  tree_hashT1A= create_treeT1(createT1A)  
  messageA = "#{subject}"
  commandA = "git commit-tree #{tree_hashT1A}"
  commit_tree(tree_hashT1A,messageA,commandA)


  

#B making a review on a new commit
 else
   
   checkcontents = `git ls-tree review | grep #{commit_hash} `
 
   if checkcontents.length==0
     tree_hashT2B = create_treeT2(t) 
      check_tree= check_tree + "040000 tree #{tree_hashT2B}\t#{commit_hash}"
     tree_hashT1B = create_treeT1(check_tree)
      messageB = "#{subject}"
      commandB = "git commit-tree #{tree_hashT1B} -p review"
      commit_tree(tree_hashT1B,messageB,commandB)
  
     

  
#C making a multiple review on same commit
  else
     
     tree_contents= `git ls-tree review:#{commit_hash}` 
    tree_contents = tree_contents + "100644 blob #{review_hash}\t#{review_hash}"
     tree_hashT2C = create_treeT2(tree_contents)    
     tree_contentsT1C = search(commit_hash,tree_hashT2C)
     tree_hashT1C = create_treeT1(tree_contentsT1C)
     messageC= "#{subject}"
     commandC= "git commit-tree #{tree_hashT1C} -p review "
     commit_tree(tree_hashT1C,messageC,commandC)

 
  
      

end   
end 














 
