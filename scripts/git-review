#!/usr/bin/env ruby
require 'rubygems'
require "trollop"
require "open3"
require 'tempfile'
include Open3

def make_review(value)
	
	File.open('/tmp/review.txt', 'w') { |file| file.write(value) }
      	%x{gvim #{'/tmp/review.txt'}}
	create_review = `git hash-object /tmp/review.txt`
        create_review = create_review.strip
        stdin, stdout, stderr = Open3.popen3("git cat-file -t #{create_review}")
        object=stdout.read().strip
        if(object.length!=0)
           puts "fatal:trying to create a duplicate review"
          exit
        end
        create_review = "git hash-object -w /tmp/review.txt"        
	review_hash = `#{create_review}`
	review_hash = review_hash.strip
	puts "Creating Review Object"
	puts review_hash
        return review_hash
end    



def create_treeT2(t)
	
 	stdin, stdout, stderr = Open3.popen3("git mktree")
  	stdin.write t
  	stdin.close
  	tree_hashT2 = stdout.read().strip
  	stdout.close
	return tree_hashT2
end


def create_treeT1(createT1)
	
	
  	stdin, stdout, stderr = Open3.popen3("git mktree")
  	stdin.write createT1
  	stdin.close
  	tree_hashT1 = stdout.read().strip
        return tree_hashT1
end


def commit_tree(tree_hashT1,commit_message,command)
  	stdin,stdout, stderr = Open3.popen3(command)
   	stdin.write commit_message
   	stdin.close
   	commit_treeT1 = stdout.read()
   	commit_treeT1 = commit_treeT1.strip
   	createreviewbranch = ` git branch -f review #{commit_treeT1}`
end


def search(commit_hash,tree_hashT2)

	checkreviewcontents = `git ls-tree review  `
  	checkreviewcontents= checkreviewcontents.split("\n").map {|row| row.split()}
  	matched_rowindex=checkreviewcontents.find_index {|row| row[3]==commit_hash}
  	checkreviewcontents[matched_rowindex][2]= tree_hashT2
  	tree_contentsT1=checkreviewcontents.map{|line| line[0..2].join(" ") + "\t" + line[3]}.join "\n"
        return tree_contentsT1
end 	

def delete(tree_hash,review_del)

                tree_contents_rm= `git ls-tree review:#{tree_hash}`            
                checkreviewcontents= tree_contents_rm.split("\n").map {|row| row.split()}
  	        matched_rowindex=checkreviewcontents.find_index {|row| row[3]==review_del }
    
                if matched_rowindex == nil
                   puts "Review not found"
                   exit
                end
             
                checkreviewcontents.delete_at(matched_rowindex)  
                checkreviewcontents=checkreviewcontents.map{|line| line[0..2].join(" ") + "\t" + line [3]}.join "\n" 
                tree_hashT2 = create_treeT2(checkreviewcontents)    
                tree_contentsT1 = search(tree_hash,tree_hashT2)
                tree_hashT1 = create_treeT1(tree_contentsT1)
                author = `git log -1 --pretty=%an #{tree_hash}`
		author_email = `git log -1 --pretty=%ae #{tree_hash}`
		author_date = `git log -1 --pretty=%ad #{tree_hash}`
		ENV['GIT_AUTHOR_NAME'] = author
		ENV['GIT_AUTHOR_EMAIL'] = author_email
		ENV['GIT_AUTHOR_DATE'] = author_date
                
                message= "Review #{review_del} has been deleted"
                command= "git commit-tree #{tree_hashT1} -p review "
                commit_tree(tree_hashT1,message,command)
                puts "Review #{review_del} deleted successfully"

               end


opts = Trollop::options do
  
  banner <<-EOS
  Creates a review on a commit


EOS
  opt :init, "Initialize the repository to start reviewing" 
  opt :amend, "Change the last review committed"
  opt :log, "Display log history for all reviews done"
  opt :log_reviewer, "Displays log history of all reviews made by a particular reviewer" 
  opt :log_limit, "Displays log history of all reviews limiting it to a certain value"
  opt :respond, "Respond to a review"
  opt :show_raw, "Display raw review contents"
  opt :log_show, "Displays the log history for all reviews along with the raw content"
  opt :format, "Prepare reviews for email submissions"
  opt :push, "Updates remote repositories by adding reviews"
  opt :pull, "Fetches reviews from remote repositories" 
  opt :display, "Displays the review along with interleaved history"
  opt :rm, "Deletes the review"
  opt :list, "View list of reviews for a particular commit"
  opt :filter_reviewer, "Deletes all reviews except the reviewer specified"
  opt :rm_before, "Deletes all reviews before the date given"
  opt :rm_after, "Deletes all reviews after the date given"
end
          if opts[:init] ==true
               
               stdin, stdout, stderr = Open3.popen3("git branch --track review origin/review")
   	       check_remote_branch = stdout.read()
  	       error = stderr.read().strip
      	       error1= "fatal: A branch named 'review' already exists."
               error2= "fatal: Not a valid object name: 'origin/review'."
                    
               if error == error1.strip || error ==error2.strip 
               end
               puts "git-review ready to use"
               exit
          
         elsif opts[:push] ==true  
              
               `git push origin review:review`
                 
               exit
   
         elsif opts[:pull] ==true
             
              `git clone -b review .git .git/review-workingdir`        #this to create the special workingdir                 
              `git remote add rwd .git/review-workingdir`              #that to create a remote pointing to it
              `git fetch origin review:origin/review`
              `git push -f rwd origin/review:origin/review`            #to push the origin/review branch to that repository                   
              Dir.chdir('.git/review-workingdir/')
              `git merge origin/review`
              Dir.chdir('../../')
              `git fetch rwd`
              `git branch -f review rwd/review` 
              `git remote rm rwd`
              `rm -rf .git/review-workingdir`
                     
                exit
              
          elsif opts[:amend] ==true               
		

                 stdin, stdout, stderr = Open3.popen3("git show-branch review")
                   
                   error = stderr.read()
                   if error.length!=0  
                   puts "fatal: Not a valid object name review"

                    exit
                end
		review_log = `git review-log`
		review_log = review_log.split(/\n/)[1]
		review_hash = review_log.split[1]                        
		get_tree = `git log --numstat review | grep /#{review_hash}`
                begin                                                 #Faster way to get tree hash
                  get_tree = get_tree.split(/\n/)
                  get_tree = get_tree[0].split(/\t/)
                  tree_hash = get_tree[2].split(/\//)[0]
                rescue NoMethodError
                  puts "--amend needs a review hash. Check git review --help"
                  exit
                end
                if(!tree_hash)
		  get_tree = `git review --show-raw #{review_del}`
                  tree_hash= get_tree.lines.first
                  tree_hash= tree_hash.split[2]
                end                                                   #Alternative incase above fails to Get the tree the review belongs to
		value = `git show #{review_hash}`
		amended_hash = make_review(value)
		checkcontents = `git ls-tree review:#{tree_hash}`
		checkcontents = checkcontents + "100644 blob #{amended_hash}\t#{amended_hash}" 
                tree_hashT2_amend = create_treeT2(checkcontents)
		tree_contentsT1_amend = search(tree_hash,tree_hashT2_amend)
		tree_hashT1_amend = create_treeT1(tree_contentsT1_amend)
   		message_amend= "Amended Review #{review_hash}"
                author = `git log -1 --pretty=%an #{tree_hash}`
		author_email = `git log -1 --pretty=%ae #{tree_hash}`
		author_date = `git log -1 --pretty=%ad #{tree_hash}`
		ENV['GIT_AUTHOR_NAME'] = author
		ENV['GIT_AUTHOR_EMAIL'] = author_email
		ENV['GIT_AUTHOR_DATE'] = author_date
    	        command_amend= "git commit-tree #{tree_hashT1_amend} -p review"
                commit_tree(tree_hashT1_amend,message_amend,command_amend)
		exit

           elsif opts[:log]==true
                 stdin, stdout, stderr = Open3.popen3("git show-branch review")
                   
                   error = stderr.read()
                   if error.length!=0  
                   puts "fatal: Not a valid object name review"

                    exit
                end
                if ARGV.length ==0
                    stdin, stdout, stderr = Open3.popen3("git review-log")
       		    review_log=stdout.read() 
                    begin
                    IO.popen("less", "w") { |f| f.puts review_log}                  
                    rescue Errno::EPIPE
                     #do nothing
                    end
                    exit
                end 
                commit_hash = ARGV[0]                                   #log for a particular commit only
                check= `git cat-file -t #{commit_hash}`
                check=check.strip
                if check != "commit"
                   puts "--log needs a commit hash. Check git review --help"
                   exit
                end
                stdin, stdout, stderr = Open3.popen3("git rev-parse #{commit_hash}")
                commit_hash = stdout.read()
                error = stderr.read()
                commit_hash = commit_hash.strip
                review_log_commit = `git review-log #{commit_hash}`
                if review_log_commit.length == 0 
                    puts "No reviews found for commit #{commit_hash}"
                    exit
                end
                begin
                   IO.popen("less", "w") { |f| f.puts review_log_commit}
                rescue Errno::EPIPE
                     #do nothing
                end
                exit

             elsif opts[:log_limit]==true
                  stdin, stdout, stderr = Open3.popen3("git show-branch review")
                   
                   error = stderr.read()
                   if error.length!=0  
                   puts "fatal: Not a valid object name review"

                    exit
                end
		 if ARGV.length ==0
		   puts "--log-limit requires an argument. Check git review --help"
                   exit
                 else 
                     
                    review_log_limit =`git review-log-limit #{ARGV[0]}` 
                    begin
                      IO.popen("less", "w") { |f| f.puts review_log_limit}                  
                    rescue Errno::EPIPE
                      #do nothing
                    end
                 end 
                 exit
            
             elsif opts[:log_reviewer]==true
                 stdin, stdout, stderr = Open3.popen3("git show-branch review")
                   
                   error = stderr.read()
                   if error.length!=0  
                   puts "fatal: Not a valid object name review"

                    exit
                end
                if ARGV.length ==0
                   puts " --log-reviewer needs a reviewer name. Check git review --help"
                   exit               
		end 
                author_name = ARGV[0]
                author_lname = ARGV[1]
                author_name = author_name.strip
                author_name = author_name.upcase
                if ARGV.length ==2
                  author_lname = author_lname.strip
                  author_lname = author_lname.upcase
                  author_name = author_name + author_lname
                end
                review_log_author = `git review-log-reviewer #{author_name}`
                if review_log_author.length == 0 
                  puts "No reviews found for reviewer #{author_name}"
                  exit
                end
                begin
                  IO.popen("less", "w") { |f| f.puts review_log_author}                  
                rescue Errno::EPIPE
                     #do nothing
                end 
                exit         


   
          elsif opts[:format]==true
                 stdin, stdout, stderr = Open3.popen3("git show-branch review")
                   
                   error = stderr.read()
                   if error.length!=0  
                   puts "fatal: Not a valid object name review"

                    exit
                end
                if ARGV.length ==0
                   puts " --format needs a review hash. Check git review --help"
                   exit
                end
                review_format = ARGV[0] 
                check= `git cat-file -t #{review_format}`
                check=check.strip
                if check != "blob"
                   puts "--format needs a review hash. Check git review --help"
                   exit
                end
                review_format = `git rev-parse #{review_format}`
                review_format = review_format.strip
		format =`git review-format #{review_format}`
                print format
                exit 
		
               
            elsif opts[:log_show]==true
                stdin, stdout, stderr = Open3.popen3("git show-branch review")
                   
                   error = stderr.read()
                   if error.length!=0  
                   puts "fatal: Not a valid object name review"

                    exit
                end
                 if ARGV.length ==0
		    review_log_show =`git review-log-show`
                    begin
                      IO.popen("less", "w") { |f| f.puts review_log_show}   
                    rescue Errno::EPIPE
                      #do nothing
                    end
                    exit
                 end 
                commit_hash = ARGV[0]
                check= `git cat-file -t #{commit_hash}`
                check=check.strip
                if check != "commit"
                   puts "--log-show needs a commit hash. Check git review --help"
                   exit
                end
                stdin, stdout, stderr = Open3.popen3("git rev-parse #{commit_hash}")
                commit_hash = stdout.read()
                error = stderr.read()              
                commit_hash = commit_hash.strip
                review_log_show = `git review-log-show #{commit_hash}`
                if review_log_show.length == 0 
                    puts "No reviews found for commit #{commit_hash}"
                    exit
                end
                begin
                  IO.popen("less", "w") { |f| f.puts review_log_show}                  
                rescue Errno::EPIPE
                     #do nothing
                end 
                exit 
           
            elsif opts[:display]==true
                stdin, stdout, stderr = Open3.popen3("git show-branch review")
                   
                   error = stderr.read()
                   if error.length!=0  
                   puts "fatal: Not a valid object name review"

                    exit
                end
                if ARGV.length ==0
                   puts " --display needs a review hash. Check git review --help"
                   exit
                end
                review_display = ARGV[0] 
                check= `git cat-file -t #{review_display}`
                check=check.strip
                if check != "blob"
                   puts "--display needs a review hash. Check git review --help"
                   exit
                end
                review_display = `git rev-parse #{review_display}`
                review_display = review_display.strip
		review_display =`git display #{review_display}`
                print review_display
                exit 

            elsif opts[:rm]==true
                 stdin, stdout, stderr = Open3.popen3("git show-branch review")
                   
                   error = stderr.read()
                   if error.length!=0  
                   puts "fatal: Not a valid object name review"

                    exit
                end           
                if ARGV.length ==0
                   puts " --display needs a review hash. Check git review --help"
                   exit
                end
                 if ARGV[1]=="filter_author"
                   flag=1
                end
                review_del = ARGV[0]
                check= `git cat-file -t #{review_del}`
                check=check.strip
                if check != "blob"
                   puts "--rm needs a review hash. Check git review --help"
                   exit
                end 
                review_del = `git rev-parse #{review_del}`
                review_del = review_del.strip
                if flag==1
                   commitid = ARGV[2]
                   delete(commitid,review_del)
                else
                    get_tree = `git log --numstat review | grep /#{review_del}`
                    begin
                       get_tree = get_tree.split(/\n/)
                       get_tree = get_tree[0].split(/\t/)
                       tree_hash = get_tree[2].split(/\//)[0]
                    rescue NoMethodError
                       puts "--rm needs a review hash. Check git review --help"
                       exit
                    end
                    if(!tree_hash)
		        get_tree = `git review --show-raw #{review_del}`
                        tree_hash= get_tree.lines.first
                        tree_hash= tree_hash.split[2]
                    end 
                    delete(tree_hash, review_del)
                end
                exit
  
             elsif opts[:list]==true
                
                if ARGV.length ==0
                   
                   stdin, stdout, stderr = Open3.popen3("git show-branch review")
                   
                   error = stderr.read()
                   if error.length!=0  
                   puts "fatal: Not a valid object name review"

                    exit
                end
                check_list = `git ls-tree review -r`
                   check_list =  check_list.split(/\n/)
                   l = check_list.length
                   list="Total Number of Reviews: #{l}\n"
                   check_list.each do |commitid|
                        commitid=commitid.split(/\t/)
                        commitid=commitid[1].split("/")
                        commit = commitid[0]
                        reviewid = commitid[1]
                        list= list + "\nReview: #{reviewid}"
                        list = list + "\nCommit Reviewed: #{commit}\n"
                        end
                   begin
                     IO.popen("less", "w") { |f| f.puts list}
                   rescue Errno::EPIPE
                     #do nothing
                   end
                   exit
                end
                commit_hash = ARGV[0]
                stdin, stdout, stderr = Open3.popen3("git show-branch review")
                   
                   error = stderr.read()
                   if error.length!=0  
                   puts "fatal: Not a valid object name review"

                    exit
                end
                check= `git cat-file -t #{commit_hash}`
                check=check.strip
                if check != "commit"
                   puts "--list needs a commit hash. Check git review --help"
                   exit
                end
                stdin, stdout, stderr = Open3.popen3("git rev-parse #{commit_hash}")
                commit_hash = stdout.read()
                error = stderr.read()
                commit_hash = commit_hash.strip
                check_list = `git ls-tree review:#{commit_hash}`
                check_list =  check_list.split(/\n/)
                l = check_list.length
                list="Total Number of Reviews: #{l}\n"
                check_list.each do |n|
                      n=n.split(/\t/)
                      list= list + "\nReview: #{n[1]}\n"
                end 
                if list.length == 0 
                    puts "No reviews found for commit #{commit_hash}"
                    exit
                end
                begin
                  IO.popen("less", "w") { |f| f.puts list}
                rescue Errno::EPIPE
                     #do nothing
                end              
                exit
             
              
             elsif opts[:filter_reviewer]==true
                stdin, stdout, stderr = Open3.popen3("git show-branch review")
                   
                   error = stderr.read()
                   if error.length!=0  
                   puts "fatal: Not a valid object name review"

                    exit
                end
                if ARGV.length ==0
                   puts " --filter-reviewer needs a reviewer name. Check git review --help"
                   exit               
		end 
                author_name = ARGV[0]
                author_lname = ARGV[1]
                author_name = author_name.strip
                author_name = author_name.upcase
                if ARGV.length ==2
                   author_lname = author_lname.strip
                   author_lname = author_lname.upcase
                   author_name = author_name + author_lname
                end
		check_list = `git ls-tree review -r`
                check_list =  check_list.split(/\n/)
                l = check_list.length
                list=""
                check_list.each do |commitid|
                           commitid=commitid.split(/\t/)
                           commitid=commitid[1].split("/")
                           commit = commitid[0]
                           reviewid = commitid[1]
                           list_review = `git log --numstat review --pretty=fuller |grep -B 5 /#{reviewid}`
                           list_review = list_review.split(/\n/)[0]
                           if list_review.length==0
                              next
                           end
                           author = list_review.split("Commit: ")[1]
                           author = author.strip
                           author=author.split(/\n/)[0]
                           name = author.split(/\s/)[0]
                           name = name.upcase
                           last_name = author.split(/\s/)[1]
                           last_name = last_name.upcase
                           full_name = name + last_name
                           full_name = full_name.strip
                           full_name1 = last_name + name 
                           full_name1 = full_name1.strip              
                           if author_name!=last_name && author_name!=name && author_name!=full_name && author_name!=full_name1 
                              reviewdel =  `git review --rm "#{reviewid}" "filter_author" "#{commit}" `
                              puts reviewdel  
                             
                           end
                    end
                exit
                

             elsif opts[:rm_before]

		stdin, stdout, stderr = Open3.popen3("git show-branch review")
                   
                   error = stderr.read()
                   if error.length!=0  
                   puts "fatal: Not a valid object name review"

                    exit
                end
                
		if ARGV.length ==0
                   puts " --rm-before needs a date. Check git review --help"
                   exit               
		end 
                date = ARGV[0]
		check_list = `git ls-tree review -r`
                check_list =  check_list.split(/\n/)
                l = check_list.length
                list=""
                check_list.each do |commitid|
                           commitid=commitid.split(/\t/)
                           commitid=commitid[1].split("/")
                           commit = commitid[0]
                           reviewid = commitid[1]
                           list_review = `git log --numstat review --pretty=fuller --before=#{date} |grep -B 5 /#{reviewid}`
                           
                           if list_review.length==0
                              next
                           end
                           
                           reviewdel =  `git review --rm "#{reviewid}" `
                           puts reviewdel  
                             
                           end
                    
                exit

             elsif opts[:rm_after]

		stdin, stdout, stderr = Open3.popen3("git show-branch review")
                   
                   error = stderr.read()
                   if error.length!=0  
                   puts "fatal: Not a valid object name review"

                    exit
                end
                
		if ARGV.length ==0
                   puts " --rm-after needs a date. Check git review --help"
                   exit               
		end 
                date = ARGV[0]
		check_list = `git ls-tree review -r`
                check_list =  check_list.split(/\n/)
                l = check_list.length
                list=""
                check_list.each do |commitid|
                           commitid=commitid.split(/\t/)
                           commitid=commitid[1].split("/")
                           commit = commitid[0]
                           reviewid = commitid[1]
                           list_review = `git log --numstat review --pretty=fuller --after=#{date} |grep -B 5 /#{reviewid}`
                           
                           if list_review.length==0
                              next
                           end
                           
                           reviewdel =  `git review --rm "#{reviewid}" `
                           puts reviewdel  
                             
                           end
                    
                exit



             elsif opts[:show_raw]==true
                stdin, stdout, stderr = Open3.popen3("git show-branch review")
                   
                   error = stderr.read()
                   if error.length!=0  
                   puts "fatal: Not a valid object name review"

                    exit
                end
                if ARGV.length ==0
                   puts " --show-raw needs a review hash. Check git review --help"
                   exit
                end
                review_raw = ARGV[0]
                stdin, stdout, stderr = Open3.popen3("git cat-file -t #{review_raw}")
                   
                   error = stderr.read()
                   if error.length!=0  
                   puts "error: unable to find #{review_raw}"
                   
                    exit
                 end
                check= stdout.read()
                check=check.strip
                if check != "blob"
                   puts "--show-raw needs a review hash. Check git review --help"
                   exit
                end
                review_raw = `git rev-parse #{review_raw}`
                review_raw = review_raw.strip
                check = `git show #{review_raw}`
                check_commit = check.split(/\n/)
                if(check_commit[0][/^From/] || check_commit[0][/^>+From/])         #Faster alternative for linux reviews
                    check =~ /commit:(.*)/
                    commitid = $1
                    reviewer = check_commit[0].split("From : ")[1]
                    check =~ /Date :(.*)/
                    date = $1
                    if(commitid && reviewer && date)
                      date = date.strip
                      reviewer = reviewer.strip
                      commitid = commitid.strip
                      disp = "Commit Reviewed: #{commitid}\n"
                      disp = disp + "Reviewer: #{reviewer}\n"
                      disp = disp + "Reviewer Date: #{date}\n"
                      disp = disp + "---------------------------------------------------------------\n"
                      disp = disp + check


                      begin
                        IO.popen("less", "w") { |f| f.puts disp}
                      rescue Errno::EPIPE
                       #do nothing
                      end
                      exit
                    end
                end 
                checkcontents = `git log --numstat review | grep /#{review_raw}`
  	        checkcontents= checkcontents.split(/\//)[0]
                checkcontents= checkcontents.split(/\t/)[2]
                commithash=checkcontents.strip
                stdin, stdout, stderr = Open3.popen3("git log -1 review  --pretty=fuller -- #{commithash}/#{review_raw}")
                reviewer_details = stdout.read()
                error = stderr.read() 
                reviewer_details = reviewer_details.split(/\n/)
                reviewer = reviewer_details[3]
                
                reviewer = reviewer.split("Commit:\s")[1]
                reviewer = reviewer.strip
                review_date = reviewer_details[4]
                review_date = review_date.split("CommitDate:\s")[1]
                review_date = review_date.strip
                raw = "Commit Reviewed: #{commithash}\nReviewer: "
                raw=raw + "#{reviewer}\n" 
                raw = raw + "Review Date: #{review_date}\n"
                raw=raw + "-----------------------------------------------------------------\n"
                review_show_raw= %x(git cat-file -p #{review_raw})
                raw = raw + review_show_raw
                begin
                IO.popen("less", "w") { |f| f.puts raw}
                rescue Errno::EPIPE
                     #do nothing
                    end
                exit

            elsif opts[:respond]==true
                 stdin, stdout, stderr = Open3.popen3("git show-branch review")
                   
                   error = stderr.read()
                   if error.length!=0  
                   puts "fatal: Not a valid object name review"

                    exit
                end
		 if ARGV.length ==0
                    puts " --respond needs a review hash. Check git review --help"
                    exit
                end
                review_respond = ARGV[0] 
                check= `git cat-file -t #{review_respond}`
                check=check.strip
                if check != "blob"
                   puts "--respond needs a review hash. Check git review --help"
                   exit
                end
                review_respond = `git rev-parse #{review_respond}`
                review_respond = review_respond.strip 
                get_tree = `git log --numstat review | grep /#{review_respond}`
                begin
                  get_tree = get_tree.split(/\n/)
                  get_tree = get_tree[0].split(/\t/)
                  tree_hash = get_tree[2].split(/\//)[0]
                rescue NoMethodError
                  puts "--respond needs a review hash. Check git review --help"
                  exit
                end
                if(!tree_hash)
		  get_tree = `git review --show-raw #{review_del}`
                  tree_hash= get_tree.lines.first
                  tree_hash= tree_hash.split[2]
                end 
                response=`git show #{review_respond}`
                response.gsub!(/^/, ">") 
                review_hash_respond = make_review(response) 
                tree_contents_respond= `git ls-tree review:#{tree_hash}` 
	        tree_contents_respond = tree_contents_respond + "100644 blob #{review_hash_respond}\t#{review_hash_respond}"
                tree_hashT2_respond = create_treeT2(tree_contents_respond) 
                tree_contentsT1 = search(tree_hash,tree_hashT2_respond)
                tree_hashT1 = create_treeT1(tree_contentsT1)
                message_respond= "Response to #{review_respond}"
                author = `git log -1 --pretty=%an #{tree_hash}`
		author_email = `git log -1 --pretty=%ae #{tree_hash}`
		author_date = `git log -1 --pretty=%ad #{tree_hash}`
		ENV['GIT_AUTHOR_NAME'] = author
		ENV['GIT_AUTHOR_EMAIL'] = author_email
		ENV['GIT_AUTHOR_DATE'] = author_date
                command_respond= "git commit-tree #{tree_hashT1} -p review "
                commit_tree(tree_hashT1,message_respond,command_respond)
                exit                 
           end

if ARGV.length == 1 
  commit_hash = ARGV[0]
  commit_hash = `git rev-parse #{commit_hash}`
  commit_hash = commit_hash.strip
  cmd = "git log -u -1 #{commit_hash} --"
else
puts "git review needs a commit hash. Check git review --help"
exit
  
end
value = `#{cmd}`
  
if value.length==0
   puts " Review object cannot be created. Check git review --help "
   exit
end

value.gsub!(/^/, ">")           #putting in chevrons at the beginning of every line
review_hash = make_review(value)  
stdin, stdout, stderr = Open3.popen3("git ls-tree review")
check_tree = stdout.read()
error = stderr.read()

t="100644 blob #{review_hash}\t#{review_hash}"
author = `git log -1 --pretty=%an #{commit_hash}`
author_email = `git log -1 --pretty=%ae #{commit_hash}`
author_date = `git log -1 --pretty=%ad #{commit_hash}`
ENV['GIT_AUTHOR_NAME'] = author
ENV['GIT_AUTHOR_EMAIL'] = author_email
ENV['GIT_AUTHOR_DATE'] = author_date
#A - making a review for the first time

 if check_tree.length==0
    tree_hashT2A = create_treeT2(t)
    createT1A = "040000 tree #{tree_hashT2A}\t#{commit_hash}\n"
    tree_hashT1A= create_treeT1(createT1A)  
    messageA = `git log -1 --pretty=%f #{commit_hash}`
    commandA = "git commit-tree #{tree_hashT1A}"
    commit_tree(tree_hashT1A,messageA,commandA)

#B making a review on a new commit
 else
   
    checkcontents = `git ls-tree review | grep #{commit_hash} `
 
    if checkcontents.length==0
       tree_hashT2B = create_treeT2(t) 
       check_tree= check_tree + "040000 tree #{tree_hashT2B}\t#{commit_hash}"
       tree_hashT1B = create_treeT1(check_tree)
       messageB = `git log -1 --pretty=%f #{commit_hash}`
       
       commandB = "git commit-tree #{tree_hashT1B} -p review"
       commit_tree(tree_hashT1B,messageB,commandB)
 
#C making a multiple review on same commit
 else
     
    tree_contents= `git ls-tree review:#{commit_hash}` 
    tree_contents = tree_contents + "100644 blob #{review_hash}\t#{review_hash}"
    tree_hashT2C = create_treeT2(tree_contents)    
    tree_contentsT1C = search(commit_hash,tree_hashT2C)
    tree_hashT1C = create_treeT1(tree_contentsT1C)
    messageC= `git log -1 --pretty=%f #{commit_hash}`
    messageC= "Re: #{messageC}" 
    commandC= "git commit-tree #{tree_hashT1C} -p review "
    commit_tree(tree_hashT1C,messageC,commandC)
      
end   
end 














 
