hello
>commit a02b6fcff989b7046e8b7e3e77e97673ef47d266
>Author: Murtuza Mukadam <murtuza16289@gmail.com>
>Date:   Sun Dec 8 20:43:18 2013 -0500
>
>    new command delete-before which allows deletion of all reviews before the date given
>
>diff --git a/scripts/git-review b/scripts/git-review
>index 7e1a3bb..bbc66b3 100755
>--- a/scripts/git-review
>+++ b/scripts/git-review
>@@ -121,7 +121,8 @@ EOS
>   opt :display, "Displays the review along with interleaved history"
>   opt :rm, "Deletes the review"
>   opt :list, "View list of reviews for a particular commit"
>-  opt :filter_reviewer, "Deletes all reviews except the committer specified"
>+  opt :filter_reviewer, "Deletes all reviews except the reviewer specified"
>+  opt :delete_before, "Deletes all reviews before the date given"
> end
>           if opts[:init] ==true
>                
>@@ -572,6 +573,44 @@ end
>                 exit
>                 
> 
>+             elsif opts[:delete_before]
>+
>+		stdin, stdout, stderr = Open3.popen3("git show-branch review")
>+                   
>+                   error = stderr.read()
>+                   if error.length!=0  
>+                   puts "fatal: Not a valid object name review"
>+
>+                    exit
>+                end
>+                
>+		if ARGV.length ==0
>+                   puts " --delete-before needs a reviewer name. Check git review --help"
>+                   exit               
>+		end 
>+                date = ARGV[0]
>+		check_list = `git ls-tree review -r`
>+                check_list =  check_list.split(/\n/)
>+                l = check_list.length
>+                list=""
>+                check_list.each do |commitid|
>+                           commitid=commitid.split(/\t/)
>+                           commitid=commitid[1].split("/")
>+                           commit = commitid[0]
>+                           reviewid = commitid[1]
>+                           list_review = `git log --numstat review --pretty=fuller --before=#{date} |grep -B 5 /#{reviewid}`
>+                           
>+                           if list_review.length==0
>+                              next
>+                           end
>+                           
>+                           reviewdel =  `git review --rm "#{reviewid}" `
>+                           puts reviewdel  
>+                             
>+                           end
>+                    
>+                exit
>+
>              elsif opts[:show_raw]==true
>                 stdin, stdout, stderr = Open3.popen3("git show-branch review")
>                    
