>commit 89e88fb5720986115802518bf8bf4128ca9362ff
>Author: Murtuza Mukadam <murtuza16289@gmail.com>
>Date:   Fri Jun 28 12:03:02 2013 -0400
>
>    Linux Scripts
>
>diff --git a/Linux Scripts/git-comment b/Linux Scripts/git-comment
>deleted file mode 100755
>index 54e83f4..0000000
>--- a/Linux Scripts/git-comment	
>+++ /dev/null
>@@ -1,94 +0,0 @@
>-#!/usr/bin/perl
>-
>-
>-
>-my $review_hash=$ARGV[0];
>-
>-
>-my $show=`git show $review_hash`;
>-
>-
>-
>-my $inside_diff = 0;
>-my $pos = 1;
>-my $comment;
>-my $comment1;
>-
>-
>-open my $showHandle, '<', \$show;
>-
>-while(my $line = <$showHandle>) {
>-       
>-       print $line;
>-         
>-	if($line =~ />commit\s (\w{40})/xms) {
>-		print "\nReview on commit $1\n";
>-		$inside_diff = 0;
>-	}
>-	#elsif($line =~ /^>diff\s --git\s a(.*?)\s b(.*?)$/xms) {
>-	#	print "\nold file = $1 -- new file = $2\n";
>-	#}
>-	elsif($line =~ /^>\@\@\s -(\d+)\s \+(\d+),(\d+)/xms) {
>-		$inside_diff = 1;
>-	#	print "\nold position $1 to $2 -- new position $3 to $4\n";
>-		$pos = 1;
>-	}
>-
>-     elsif($line =~ /^>\@\@\s -(\d+),(\d+)\s \+(\d+),(\d+)(\d+)/xms) {
>-		$inside_diff = 1;
>-		#print "\nold position $1 to $2 -- new position $3 to $4\n";
>-		$pos = 1;
>-	}
>-
>-
>-        elsif($line =~ /^>\@\@\s -(\d+)(\d+),(\d+)\s \+(\d+)(\d+),(\d+)/xms) {
>-                 $inside_diff = 1;
>-		#print "\nold position $1 to $2 -- new position $3 to $4\n";
>-		$pos = 1;
>-          }
>-
>-         elsif($line =~ /^>\@\@\s -(\d+)\s \+(\d+),(\d+)(\d+)/xms) {
>-
>-               $inside_diff = 1;
>-		#print "\nold position $1 to $2 -- new position $3 to $4\n";
>-		$pos = 1;
>-             }
>-
>-         elsif($line =~ /^>\@\@\s -(\d+),(\d+)\s \+(\d+),(\d+)/xms) {
>-
>-               $inside_diff = 1;
>-		#print "\nold position $1 to $2 -- new position $3 to $4\n";
>-		$pos = 1;
>-             }
>-
>-           elsif($line =~ /^>\@\@\s -(\d+)(\d+),(\d+)(\d+)\s \+(\d+)(\d+),(\d+)/xms) {
>-
>-             $inside_diff = 1;
>-		#print "\nold position $1 to $2 -- new position $3 to $4\n";
>-		$pos = 1;
>-          }
>-
>-	#found a comment
>-	elsif($inside_diff == 1 and $line =~ /^[^>+ >-]/) {
>-		$comment .= $line;
>-                $comment1 .=$line;
>-                 
>-	}
>-	elsif($inside_diff == 1) {
>-		if (defined $comment) {
>-			print "\nComment starting at line $pos:\n $comment\n";
>-			$comment = undef;
>-		}
>-		$pos ++;
>-	}
>-}
>-
>-
>-
>-
>-
>-
>-
>-
>-
>-
>diff --git a/Linux Scripts/git-review b/Linux Scripts/git-review
>deleted file mode 100755
>index ff37f20..0000000
>--- a/Linux Scripts/git-review	
>+++ /dev/null
>@@ -1,282 +0,0 @@
>-#!/usr/bin/env ruby
>-require 'rubygems'
>-require "trollop"
>-require "open3"
>-include Open3
>-
>-
>-
>-def make_review(value)
>-	
>-	File.open('/tmp/review.tmp', 'w') { |file| file.write(value) }
>-	%x{gvim #{'/tmp/review.tmp'}}
>-	create_review = "git hash-object -w /tmp/review.tmp"
>-	review_hash = `#{create_review}`
>-	review_hash = review_hash.strip
>-	puts "Creating Review Object"
>-	puts review_hash
>-        return review_hash
>-end    
>-
>-
>-
>-def create_treeT2(t)
>-	
>- 	stdin, stdout, stderr = Open3.popen3("git mktree")
>-  	stdin.write t
>-  	stdin.close
>-  	tree_hashT2 = stdout.read().strip
>-  	stdout.close
>-	return tree_hashT2
>-end
>-
>-
>-def create_treeT1(createT1)
>-	
>-	
>-  	stdin, stdout, stderr = Open3.popen3("git mktree")
>-  	stdin.write createT1
>-  	stdin.close
>-  	tree_hashT1 = stdout.read().strip
>-        return tree_hashT1
>-end
>-
>-def commit_tree(tree_hashT1,commit_message,command)
>-  	stdin,stdout, stderr = Open3.popen3(command)
>-   	stdin.write commit_message
>-   	stdin.close
>-   	commit_treeT1 = stdout.read()
>-   	commit_treeT1 = commit_treeT1.strip
>-   	createreviewbranch = ` git branch -f review #{commit_treeT1}`
>-end
>-
>-def search(commit_hash,tree_hashT2)
>-
>-	checkreviewcontents = `git ls-tree review  `
>-  	checkreviewcontents= checkreviewcontents.split("\n").map {|row| row.split()}
>-  	matched_rowindex=checkreviewcontents.find_index {|row| row[3]==commit_hash}
>-  	checkreviewcontents[matched_rowindex][2]= tree_hashT2
>-  	tree_contentsT1=checkreviewcontents.map{|line| line[0..2].join(" ") + "\t" + line[3]}.join "\n"
>-        return tree_contentsT1
>-  end 	
>-
>-
>-
>-
>-opts = Trollop::options do
>-  
>-  banner <<-EOS
>-Creates a review object on a commit
>-
>-
>-EOS
>-
>-  opt :amend, "Change the last review committed"
>-  opt :log, "Display log history for all reviews done" 
>-  opt :respond, "Respond to a review"
>-  opt :show_raw, "Display raw review contents"
>-  opt :show_comments, "Displays the list of comments in a review object"
>-  opt :log_show, "Displays the log history for all reviews along with the raw content"
>-  opt :format, "Prepare reviews for email submissions"
>-end
>-
>-          
>-              
>-          if opts[:amend] ==true               
>-		
>-		review_log = `git review-log`
>-		review_log = review_log.split(/\n/)[1]
>-		review_hash = review_log.split[1]                        
>-		cmd = `git show #{review_hash}`
>-		tree_hash= cmd.lines.first
>-		tree_hash= tree_hash.split[1]             #Getting the tree the review belongs to
>-		value = `git show #{review_hash}`
>-		amended_hash = make_review(value)
>-		checkcontents = `git ls-tree review:#{tree_hash}`
>-		checkcontents = checkcontents + "100644 blob #{amended_hash}\t#{amended_hash}" 
>-                tree_hashT2_amend = create_treeT2(checkcontents)
>-		tree_contentsT1_amend = search(tree_hash,tree_hashT2_amend)
>-		tree_hashT1_amend = create_treeT1(tree_contentsT1_amend)
>-   		message_amend= "Amended Review #{review_hash}"
>-    	        command_amend= "git commit-tree #{tree_hashT1_amend} -p review"
>-                commit_tree(tree_hashT1_amend,message_amend,command_amend)
>-		exit
>-
>-           elsif opts[:log]==true
>-                
>-           
>-		review_log=`git review-log`
>-                puts review_log
>-                exit 
>-               
>-          elsif opts[:format]==true
>-                
>-           
>-                if ARGV.length ==0
>-                 puts " --format needs a review hash. Check git review --help"
>-                 exit
>-                end
>-               
>-                review_format = ARGV[0] 
>-               
>-		format =`git review-format #{review_format}`
>-                print format
>-                exit 
>-		
>-               
>-            elsif opts[:log_show]==true
>-                
>-		review_log_show=`git review-log-show`
>-                puts review_log_show
>-                exit
>-                
>-           elsif opts[:show_comments]==true
>-               
>-
>-                if ARGV.length ==0
>-                 puts " --show-comments needs a review hash. Check git review --help"
>-                 exit
>-                end
>-               
>-                review_comments = ARGV[0] 
>-               
>-		review_comments=`git comment #{review_comments}`
>-                print review_comments
>-                exit 
>-
>-            elsif opts[:show_raw]==true
>-            
>-                if ARGV.length ==0
>-                 puts " --show-raw needs a review hash. Check git review --help"
>-                 exit
>-                end
>-               
>-                review_raw = ARGV[0]
>-              
>-                get_tree = `git show #{review_raw}`
>-                tree_hash= get_tree.lines.first
>-                tree_hash= tree_hash.split[1] 
>-                
>-                reviewer_details = `git log -1 review  -- #{tree_hash}/#{review_raw}` 
>-                puts "Commit Reviewed: #{tree_hash}"
>-                print "Reviewer"
>-                puts reviewer_details[54..-1]
>-                review_show_raw= %x(git cat-file -p #{review_raw})
>-                puts review_show_raw
>-                 
>-                exit
>-
>-            elsif opts[:respond]==true
>-              
>-		 if ARGV.length ==0
>-                 puts " --respond needs a review hash. Check git review --help"
>-                 exit
>-                end
>-               
>-                review_respond = ARGV[0]  
>-                get_tree = `git show #{review_respond}`
>-                tree_hash= get_tree.lines.first
>-                tree_hash= tree_hash.split[1] 
>-                response=`git show #{review_respond}`
>-                review_hash_respond = make_review(response) 
>-                tree_contents_respond= `git ls-tree review:#{tree_hash}` 
>-	        tree_contents_respond = tree_contents_respond + "100644 blob #{review_hash_respond}\t#{review_hash_respond}"
>-                tree_hashT2_respond = create_treeT2(tree_contents_respond) 
>-                tree_contentsT1 = search(tree_hash,tree_hashT2_respond)
>-                tree_hashT1 = create_treeT1(tree_contentsT1)
>-                message_respond= "Response to #{review_respond}"
>-                command_respond= "git commit-tree #{tree_hashT1} -p review "
>-                commit_tree(tree_hashT1,message_respond,command_respond)
>-                exit                 
>-                
>-           end
>-
>-if ARGV.length == 1 
>-  commit_hash = ARGV[0]
>-  cmd = "git log -u -1 #{commit_hash}"
>-else
>-  cmd = "git diff "
>-  
>-end
>-  
>-  value = `#{cmd}`
>- 
>-  
>-if value.length==0
>-  puts " Review object cannot be created. Check git review --help "
>-  exit
>-end
>-
>-value.gsub!(/^/, ">")           #putting in chevrons at the beginning of every line
>-review_hash = make_review(value)  
>-
>-
>-
>-check_tree = `git ls-tree review`
>-t="100644 blob #{review_hash}\t#{review_hash}"
>-
>-
>-
>-#A - making a review for the first time
>-
>- if check_tree.length==0
>-  
>-  tree_hashT2A = create_treeT2(t)
>-  createT1A = "040000 tree #{tree_hashT2A}\t#{commit_hash}\n"
>-  tree_hashT1A= create_treeT1(createT1A)  
>-  messageA = "This is the first review on any commit"
>-  commandA = "git commit-tree #{tree_hashT1A}"
>-  commit_tree(tree_hashT1A,messageA,commandA)
>-
>-
>-  
>-
>-#B making a review on a new commit
>- else
>-   
>-    checkcontents = `git ls-tree review | grep #{commit_hash} `
>- 
>-    if checkcontents.length==0
>-      tree_hashT2B = create_treeT2(t) 
>-      check_tree= check_tree + "040000 tree #{tree_hashT2B}\t#{commit_hash}"
>-      tree_hashT1B = create_treeT1(check_tree)
>-      messageB = "This is the first review on this commit"
>-      commandB = "git commit-tree #{tree_hashT1B} -p review"
>-      commit_tree(tree_hashT1B,messageB,commandB)
>-  
>-     
>-
>-  
>-#C making a multiple review on same commit
>-  else
>-     
>-     tree_contents= `git ls-tree review:#{commit_hash}` 
>-     tree_contents = tree_contents + "100644 blob #{review_hash}\t#{review_hash}"
>-     tree_hashT2C = create_treeT2(tree_contents)    
>-     tree_contentsT1C = search(commit_hash,tree_hashT2C)
>-     tree_hashT1C = create_treeT1(tree_contentsT1C)
>-     messageC= "This commit has been reviewed before"
>-     commandC= "git commit-tree #{tree_hashT1C} -p review "
>-     commit_tree(tree_hashT1C,messageC,commandC)
>-
>- 
>-  
>-      
>-
>-end   
>-end   
>-
>-
>-
>-
>-
>-
>-
>-
>-
>-
>-
>-
>-
>-
>- 
>diff --git a/Linux Scripts/git-review-amend b/Linux Scripts/git-review-amend
>deleted file mode 100755
>index 527013b..0000000
>--- a/Linux Scripts/git-review-amend	
>+++ /dev/null
>@@ -1,68 +0,0 @@
>-#!/usr/bin/env ruby
>-
>-
>-
>-require 'rubygems'
>-require "trollop"
>-require "open3"
>-include Open3
>-
>-review_log = `git review-log`
>-
>-review_log = review_log.split(/\n/)[1]
>-
>-
>-review_hash = review_log.split[1]      
>-
>-                  
>-cmd = `git show #{review_hash}`
>-tree_hash= cmd.lines.first
>-tree_hash= tree_hash.split[1]             #Getting the tree the review belongs to
>-
>-   
>-value = `git show #{review_hash}`
>-File.open('/tmp/review.tmp', 'w') { |file| file.write(value) }
>-%x{gvim #{'/tmp/review.tmp'}}
>-
>-
>-cmd2 = "git hash-object -w /tmp/review.tmp"     #Making changes to the review hash
>-amended_hash = `#{cmd2}`                   #Getting the new review hash
>-amended_hash = amended_hash.strip
>-print "Amending Review Object"
>-puts
>-print amended_hash
>-puts
>-
>-
>-#check and replace the old review with new review and create a new T2 out of it
>-
>-checkcontents = `git ls-tree review:#{tree_hash}`
>-checkcontents = checkcontents + "100644 blob #{amended_hash}\t#{amended_hash}"
>-stdin, stdout, stderr = Open3.popen3("git mktree")
>-stdin.write checkcontents
>-stdin.close
>-tree_hashT2 = stdout.read().strip
>- 
>-
>-#check and replace the old tree with the new tree created above
>-
>-checkreviewcontents = `git ls-tree review  `
insert

kreviewcontents= checkreviewcontents.split("\n").map {|row| row.split()}
>-matched_rowindex=checkreviewcontents.find_index {|row| row[3]==tree_hash}
>-checkreviewcontents[matched_rowindex][2]= tree_hashT2
>-tree_contentsT1=checkreviewcontents.map{|line| line[0..2].join(" ") + "\t" + line[3]}.join "\n"
>-
>-stdin2, stdout2, stderr2 = Open3.popen3("git mktree")
>-stdin2.write tree_contentsT1
>-stdin2.close 
>-tree_hashT1 = stdout2.read()
>-tree_hashT1 = tree_hashT1.strip
>-commit_message= "Amended Review #{review_hash}"
>-stdin10,stdout10, stderr10 = Open3.popen3("git commit-tree #{tree_hashT1} -p review")
>-   stdin10.write commit_message
>-   stdin10.close
>-   commit_treeT1 = stdout10.read()
>-   commit_treeT1 = commit_treeT1.strip
>-   createreviewbranch = ` git branch -f review #{commit_treeT1}`
>-
>-
>diff --git a/Linux Scripts/git-review-format b/Linux Scripts/git-review-format
>deleted file mode 100755
>index e6c53ee..0000000
>--- a/Linux Scripts/git-review-format	
>+++ /dev/null
>@@ -1,56 +0,0 @@
>-#!/usr/bin/env ruby
>-#!bin/sh
>-
>-puts "hello"
>-review_hash=ARGV[0]
>-show = `git review --show-raw #{review_hash}`
>-
>-
>-from = show.split(/\n/)
>-date = from[2]
>-
>-from =from[1].split(/:/)
>-format = "From: " + from[1] +"\n"
>-
>-
>-subject = show.split(/@@/)
>-subject = subject[2].split(/\n/)
>-subject = subject[1]
>-
>-
>-format= format + "Subject: " + "[PATCH] " + subject + "\n"
>-
>-
>-format= format + date + "\n\n---\n"
>-find = `git review-log`
>-find = find.split("\n").map {|row| row.split()}
>-
>-matched_rowindex=find.find_index {|row| row[1]==review_hash}
>-
>-matched_rowindex=matched_rowindex + 2
>-
>-
>-commit = find[matched_rowindex][1]
>-
>-
>-stat = `git log --stat -1 #{commit}`
>-stat= stat.split(/\n/)
>-length = stat.length
>-stat = stat[6..length]
>-stat = stat.join("\n") 
>-
>-
>-format = format + stat + "\n"
>-
>-body = show.split(/commit\s\w{40}/)
>-
>-format = format + body[1] + "\n--\n"
>-pwd = `pwd`
>-puts pwd
>-version = `git version`
>-version= version.split(/git version/)
>-format = format + version[1]
>-#print format
>-File.open("/home/m_mukadam/murtuzareview/#{review_hash}.patch", 'w') { |file| file.write(format) }
>-
>-%x{gvim #{"/home/m_mukadam/murtuzareview/#{review_hash}.patch"}}
>diff --git a/Linux Scripts/git-review-log b/Linux Scripts/git-review-log
>deleted file mode 100755
>index 0e6ed88..0000000
>--- a/Linux Scripts/git-review-log	
>+++ /dev/null
>@@ -1,58 +0,0 @@
>-#!/usr/bin/perl
>-
>-foreach my $rev (`git rev-list review --pretty=oneline`) {
>-   
>-  ($sha=$rev) =~ s/\s.*$//;
>-   
>-  foreach my $blob (`git log --numstat -1 $sha`) {
>- 
>-my @values = (split('\t', $blob))[2];
>-
>-  foreach my $val1 (@values) {
>-
>-
>-          my @values1 = (split('\/', $val1))[0];
>-           $val1 = (split('\/', $blob))[1];
>-         
>-          print "\nReview ";
>-         
>-          print $val1;
>-
>-
>-foreach my $val (@values1) {
>- 
>-      print "commit Reviewed ";
>-      print "$val\n";
>- }
>-
>-
>-}
>-  
>-  }
>-   
>-   my $log = `git log -1 $sha`;
>-
>-   
>-   my $log_amend = (split('Amended Review', $log))[1];
>-   my $log_response = (split('Response to', $log))[1];
>-   my $removemessage = (split('\n\n', $log))[0];
>-   
>-  
>-   print "$removemessage\n";
>-   
>-   if($log_amend)
>-    {
>-      print "Amended Review"; 
>-       print "$log_amend";
>-    }
>-   
>-
>-    
>-   if($log_response)
>-    {
>-      print "Response to"; 
>-       print "$log_response";
>-    }
>-    
>-   
>-}
>diff --git a/Linux Scripts/git-review-log-show b/Linux Scripts/git-review-log-show
>deleted file mode 100755
>index eb395d4..0000000
>--- a/Linux Scripts/git-review-log-show	
>+++ /dev/null
>@@ -1,44 +0,0 @@
>-#!/usr/bin/perl 
>-
>-
>-foreach my $rev (`git rev-list review --pretty=oneline`) {
>-   
>-  ($sha=$rev) =~ s/\s.*$//;
>-   
>-  foreach my $blob (`git log --numstat -1 $sha`) {
>- 
>-my @values = (split('\t', $blob))[2];
>-
>-  foreach my $val1 (@values) {
>-
>-
>-          my @values1 = (split('\/', $val1))[0];
>-           $val1 = (split('\/', $blob))[1];
>-         
>-          print "\n\n\nReview ";
>-         
>-          print $val1;
>-          my $get_tree = `git cat-file -p $val1`;
>-          print $get_tree;
>-          
>-
>-          
>-
>-foreach my $val (@values1) {
>- 
>-      print "commit Reviewed ";
>-      print "$val\n";
>- }
>-
>-
>-}
>-  
>-  }
>-
>-  
>-   my $log = `git log -1 $sha`;
>-    my $removemessage = (split('\n\n', $log))[0];
>- print "$removemessage\n";
>-   
>-}
>-
>diff --git a/Linux Scripts/git-review.html b/Linux Scripts/git-review.html
>deleted file mode 100644
>index 604cef9..0000000
>--- a/Linux Scripts/git-review.html	
>+++ /dev/null
>@@ -1,239 +0,0 @@
>-<!DOCTYPE html>
>-<html>
>-<head>
>-  <meta http-equiv='content-type' value='text/html;charset=utf8'>
>- 
>-  <title>git-review(1) - Create a Review Object</title>
>-  <style type='text/css' media='all'>
>-  /* style: man */
>-  body#manpage {margin:0}
>-  .mp {max-width:190ex;padding:0 9ex 1ex 4ex}
>-  .mp p,.mp pre,.mp ul,.mp ol,.mp dl {margin:0 0 20px 0}
>-  .mp h2 {margin:10px 0 0 0}
>-  .mp > p,.mp > pre,.mp > ul,.mp > ol,.mp > dl {margin-left:8ex}
>-  .mp h3 {margin:0 0 0 4ex}
>-  .mp dt {margin:0;clear:left}
>-  .mp dt.flush {float:left;width:8ex}
>-  .mp dd {margin:0 0 0 9ex}
>-  .mp h1,.mp h2,.mp h3,.mp h4 {clear:left}
>-  .mp pre {margin-bottom:20px}
>-  .mp pre+h2,.mp pre+h3 {margin-top:22px}
>-  .mp h2+pre,.mp h3+pre {margin-top:5px}
>-  .mp img {display:block;margin:auto}
>-  .mp h1.man-title {display:none}
>-  .mp,.mp code,.mp pre,.mp tt,.mp kbd,.mp samp,.mp h3,.mp h4 {font-family:monospace;font-size:14px;line-height:1.42857142857143}
>-  .mp h2 {font-size:16px;line-height:1.25}
>-  .mp h1 {font-size:20px;line-height:2}
>-  .mp {text-align:justify;background:#fff}
>-  .mp,.mp code,.mp pre,.mp pre code,.mp tt,.mp kbd,.mp samp {color:#131211}
>-  .mp h1,.mp h2,.mp h3,.mp h4 {color:#030201}
>-  .mp u {text-decoration:underline}
>-  .mp code,.mp strong,.mp b {font-weight:bold;color:#131211}
>-  .mp em,.mp var {font-style:italic;color:#232221;text-decoration:none}
>-  .mp a,.mp a:link,.mp a:hover,.mp a code,.mp a pre,.mp a tt,.mp a kbd,.mp a samp {color:#0000ff}
>-  .mp b.man-ref {font-weight:normal;color:#434241}
>-  .mp pre {padding:0 4ex}
>-  .mp pre code {font-weight:normal;color:#434241}
>-  .mp h2+pre,h3+pre {padding-left:0}
>-  ol.man-decor,ol.man-decor li {margin:3px 0 10px 0;padding:0;float:left;width:33%;list-style-type:none;text-transform:uppercase;color:#999;letter-spacing:1px}
>-  ol.man-decor {width:100%}
>-  ol.man-decor li.tl {text-align:left}
>-  ol.man-decor li.tc {text-align:center;letter-spacing:4px}
>-  ol.man-decor li.tr {text-align:right;float:right}
>-  </style>
>-</head>
>-<!--
>-  The following styles are deprecated and will be removed at some point:
>-  div#man, div#man ol.man, div#man ol.head, div#man ol.man.
>-
>-  The .man-page, .man-decor, .man-head, .man-foot, .man-title, and
>-  .man-navigation should be used instead.
>--->
>-<body id='manpage'>
>-  <div class='mp' id='man'>
>-
>-  <div class='man-navigation' style='display:none'>
>-    <a href="#NAME">NAME</a>
>-    <a href="#SYNOPSIS">SYNOPSIS</a>



>-    <a href="#DESCRIPTION">DESCRIPTION</a>
>-    <a href="#OPTIONS">OPTIONS</a>
>-    <a href="#EXAMPLES">EXAMPLES</a>
>-    <a href="#AUTHOR">AUTHOR</a>
>-    <a href="#REPORTING-BUGS">REPORTING BUGS</a>
>-    <a href="#SEE-ALSO">SEE ALSO</a>
>-  </div>
>-
>-  <ol class='man-decor man-head man head'>
>-    <li class='tl'>git-review(1)</li>
>-    <li class='tc'></li>
>-    <li class='tr'>git-review(1)</li>
>-  </ol>
>-
>-  <h2 id="NAME">NAME</h2>
>-<p class="man-name">
>-  <code>git-review</code> - <span class="man-whatis">Creates a review on a commit</span>
>-</p>
>-
>-<h2 id="SYNOPSIS">SYNOPSIS</h2>
>-
>-<p><code>git-review</code> [=&lt;<em>commit-hash</em>&gt;] [--log] [--amend] [--show-raw=&lt;review-hash&gt;] [--respond==&lt;review-hash&gt;] [--show-comments==&lt;review-hash&gt;] [--format==&lt;review-hash&gt;]</p>
>-
>-<h2 id="DESCRIPTION">DESCRIPTION</h2>
>-
>-<p>  Creates a review on a given <em>commit-hash</em>.</p>
>-
>-<h2 id="OPTIONS">OPTIONS</h2>
>-
>-<p>  &lt;log&gt;</p> 
>-
>-<p>  Shows the log history of the reviews made along with the reviewer details.</p>
>-
>-<p>  &lt;log-show&gt;</p> 
>-
>-<p>  Shows the log history of the reviews made along with raw review content.</p>
>-
>-<p>  &lt;amend&gt;</p>
>-
>-<p>  Allows reviewer to make any change to the last review.</p>
>-
>-<p>  &lt;show-raw&gt;  <em>review-hash</em> </p>
>-
>-<p>  Shows the contents of the review object.</p>
>-
>-<p>  &lt;format&gt;  <em>review-hash</em> </p>
>-
>-<p> Prepares the review for an email submission</p>
>-
>-<p>  &lt;respond&gt;  <em>review-hash</em> </p>
>-
>-<p>  Allows reviewer to respond to any review</p>
>-
>-<p>  &lt;show-comments&gt;  <em>review-hash</em> </p>
>-
>-<p>  Displays list of comments made on the review object</p>
>-
>-<h2 id="EXAMPLES">EXAMPLES</h2>
>-
>-
>-<pre><code>$ git review <em>commit-hash</em>
>-... Creating a review object on a particular commit
>-Creating Review Object
>-5c1b78028dca1b7424b5d6a0c888fa829236cda2
>-
>-
>-
>-$ git review --log
>-...shows the log history of the reviews made
>-Review b88a0c3b2c8a5924acefdb99fb50bff3a2dfe7ff
>-commit Reviewed 02f8efec7e50c925924bbe3a6160de0a82e8b724
>-Response to 921b762aad203dca6e265b2658c7c3c0566c702a
>-commit 3172364ddc0eafdcdf88275e4c56867fd748a8c4
>-Author: Murtuza Mukadam <murtuza16289@gmail.com>
>-Date:   Fri Jun 21 23:50:50 2013 -0400
>-
>-$ git review --log-show
>-...shows the log history of the reviews made along with the review content
>-Review dc0a9fbf5030a824e29657618d5184749aaaf422
>-
>-<i>content</i>
>-
>-commit Reviewed 02f8efec7e50c925924bbe3a6160de0a82e8b724
>-commit 3addb240fc1ed0fce6f1fc72915d6575fcbfe475
>-Author: Murtuza Mukadam <murtuza16289@gmail.com>
>-Date:   Fri Jun 21 23:33:03 2013 -0400
>-
>-
>-
>-$ git review --amend 
>-... allows to make a change to the review
>-Amending Review Object
>-838a2d22de4d0bb393f2874bc92734a073757fea
>-
>-
>-
>-$ git review --show-raw <em>review-hash</em>
>-... shows the raw content of the review object
>-Commit Reviewed: 02f8efec7e50c925924bbe3a6160de0a82e8b724
>-Reviewer: Murtuza Mukadam <murtuza16289@gmail.com>
>-Date:   Wed Jun 19 18:40:38 2013 -0400
>-
>-<i>content</i>
>-
>-
>-
>-
>-$ git review --respond <em>review-hash</em>
>-... allows reviewer to respond to a review
>-Creating Response Review Object
>-b3a3becba4b947a381c53a8444ac239b57acd6b0
>-
>-
>-
>-$ git review --show-comments <em>review-hash</em>
>-... allows reviewer to list the comments made on the review object
>-Review on commit 02f8efec7e50c925924bbe3a6160de0a82e8b724
>-
>-Comment starting at line 6:
>-
>-this is not correct
>-
>-
>-Comment starting at line 10:
>-it should be a running script
>-
>-
>-
>-$ git review --format <em>review-hash</em>
>-... prepares the review for an email submission
>-
>-From:  Murtuza Mukadam <murtuza16289@gmail.com>
>-Subject: [PATCH] >>+#!/usr/bin/env ruby
>-Date:   Fri Jun 21 23:50:50 2013 -0400
>-
>----
>- .../b88a0c3b2c8a5924acefdb99fb50bff3a2dfe7ff       | 62 ++++++++++++++++++++++
>- 1 file changed, 62 insertions(+)
>-
>->>Author: Murtuza Mukadam <murtuza16289@gmail.com>
>->>Date:   Fri May 31 22:31:38 2013 -0400
>->>
>->>    This is my second commit
>->>
>->>diff --git a/git-review.txt b/git-review.txt
>->>new file mode 100644
>->>index 0000000..5695fd9
>->>--- /dev/null
>->>+++ b/git-review.txt
>->>@@ -0,0 +1,48 @@
>->>+#!/usr/bin/env ruby
>->>+
>->>+cmd = "git diff"
>->>+value = `git diff`
>-
>---
>- 1.8.1.msysgit.
>-
>-</code></pre>
>-
>-<h2 id="AUTHOR">AUTHOR</h2>
>-
>-<p>Written by Murtuza Mukadam &lt;<a href="http://users.encs.concordia.ca/~m_mukada/" data-bare-link="true"> users.encs.concordia.ca/~m_mukada/</a>&gt;</p>
>-
>-<h2 id="REPORTING-BUGS">REPORTING BUGS</h2>
>-
>-<p>&lt;<a href="https://github.com/mmukadam/git-review/issues" data-bare-link="true">https://github.com/mmukadam/git-review/issues</a>&gt;</p>
>-
>-<h2 id="SEE-ALSO">SEE ALSO</h2>
>-
>-<p>&lt;<a href="https://github.com/mmukadam/git-review/" data-bare-link="true">https://github.com/mmukadam/git-review/</a>&gt;</p>
>-
>-
>-  <ol class='man-decor man-foot man foot'>
>-    <li class='tl'></li>
>-    <li class='tc'>June 2013</li>
>-    <li class='tr'>git-review(1)</li>
>-  </ol>
>-
>-  </div>
>-</body>
>-</html>
>\ No newline at end of file
>diff --git a/README.md b/README.md
>deleted file mode 100644
>index 9136e88..0000000
>--- a/README.md
>+++ /dev/null
>@@ -1,4 +0,0 @@
>-git review
>-========
>-
>-Research work with Peter 
>diff --git a/git-comment b/git-comment
>new file mode 100755
>index 0000000..54e83f4
>--- /dev/null
>+++ b/git-comment
>@@ -0,0 +1,94 @@
>+#!/usr/bin/perl
>+
>+
>+
>+my $review_hash=$ARGV[0];
>+
>+
>+my $show=`git show $review_hash`;
>+
>+
>+
>+my $inside_diff = 0;
>+my $pos = 1;
>+my $comment;
>+my $comment1;
>+
>+
>+open my $showHandle, '<', \$show;
>+
>+while(my $line = <$showHandle>) {
>+       
>+       print $line;
>+         
>+	if($line =~ />commit\s (\w{40})/xms) {
>+		print "\nReview on commit $1\n";
>+		$inside_diff = 0;
>+	}
>+	#elsif($line =~ /^>diff\s --git\s a(.*?)\s b(.*?)$/xms) {
>+	#	print "\nold file = $1 -- new file = $2\n";
>+	#}
>+	elsif($line =~ /^>\@\@\s -(\d+)\s \+(\d+),(\d+)/xms) {
>+		$inside_diff = 1;
>+	#	print "\nold position $1 to $2 -- new position $3 to $4\n";
>+		$pos = 1;
>+	}
>+
>+     elsif($line =~ /^>\@\@\s -(\d+),(\d+)\s \+(\d+),(\d+)(\d+)/xms) {
>+		$inside_diff = 1;
>+		#print "\nold position $1 to $2 -- new position $3 to $4\n";
>+		$pos = 1;
>+	}
>+
>+
>+        elsif($line =~ /^>\@\@\s -(\d+)(\d+),(\d+)\s \+(\d+)(\d+),(\d+)/xms) {
>+                 $inside_diff = 1;
>+		#print "\nold position $1 to $2 -- new position $3 to $4\n";
>+		$pos = 1;
>+          }
>+
>+         elsif($line =~ /^>\@\@\s -(\d+)\s \+(\d+),(\d+)(\d+)/xms) {
>+
>+               $inside_diff = 1;
>+		#print "\nold position $1 to $2 -- new position $3 to $4\n";
>+		$pos = 1;
>+             }
>+
>+         elsif($line =~ /^>\@\@\s -(\d+),(\d+)\s \+(\d+),(\d+)/xms) {
>+
>+               $inside_diff = 1;
>+		#print "\nold position $1 to $2 -- new position $3 to $4\n";
>+		$pos = 1;
>+             }
>+
>+           elsif($line =~ /^>\@\@\s -(\d+)(\d+),(\d+)(\d+)\s \+(\d+)(\d+),(\d+)/xms) {
>+
>+             $inside_diff = 1;
>+		#print "\nold position $1 to $2 -- new position $3 to $4\n";
>+		$pos = 1;
>+          }
>+
>+	#found a comment
>+	elsif($inside_diff == 1 and $line =~ /^[^>+ >-]/) {
>+		$comment .= $line;
>+                $comment1 .=$line;
>+                 
>+	}
>+	elsif($inside_diff == 1) {
>+		if (defined $comment) {
>+			print "\nComment starting at line $pos:\n $comment\n";
>+			$comment = undef;
>+		}
>+		$pos ++;
>+	}
>+}
>+
>+
>+
>+
>+
>+
>+
>+
>+
>+
>diff --git a/git-review b/git-review
>new file mode 100755
>index 0000000..ff37f20
>--- /dev/null
>+++ b/git-review
>@@ -0,0 +1,282 @@
>+#!/usr/bin/env ruby
>+require 'rubygems'
>+require "trollop"
>+require "open3"
>+include Open3
>+
>+
>+
>+def make_review(value)
>+	
>+	File.open('/tmp/review.tmp', 'w') { |file| file.write(value) }
>+	%x{gvim #{'/tmp/review.tmp'}}
>+	create_review = "git hash-object -w /tmp/review.tmp"
>+	review_hash = `#{create_review}`
>+	review_hash = review_hash.strip
>+	puts "Creating Review Object"
>+	puts review_hash
>+        return review_hash
>+end    
>+
>+
>+
>+def create_treeT2(t)
>+	
>+ 	stdin, stdout, stderr = Open3.popen3("git mktree")
>+  	stdin.write t
>+  	stdin.close
>+  	tree_hashT2 = stdout.read().strip
>+  	stdout.close
>+	return tree_hashT2
>+end
>+
>+
>+def create_treeT1(createT1)
>+	
>+	
>+  	stdin, stdout, stderr = Open3.popen3("git mktree")
>+  	stdin.write createT1
>+  	stdin.close
>+  	tree_hashT1 = stdout.read().strip
>+        return tree_hashT1
>+end
>+
>+def commit_tree(tree_hashT1,commit_message,command)
>+  	stdin,stdout, stderr = Open3.popen3(command)
>+   	stdin.write commit_message
>+   	stdin.close
>+   	commit_treeT1 = stdout.read()
>+   	commit_treeT1 = commit_treeT1.strip
>+   	createreviewbranch = ` git branch -f review #{commit_treeT1}`
>+end
>+
>+def search(commit_hash,tree_hashT2)
>+
>+	checkreviewcontents = `git ls-tree review  `
>+  	checkreviewcontents= checkreviewcontents.split("\n").map {|row| row.split()}
>+  	matched_rowindex=checkreviewcontents.find_index {|row| row[3]==commit_hash}
>+  	checkreviewcontents[matched_rowindex][2]= tree_hashT2
>+  	tree_contentsT1=checkreviewcontents.map{|line| line[0..2].join(" ") + "\t" + line[3]}.join "\n"
>+        return tree_contentsT1
>+  end 	
>+
>+
>+
>+
>+opts = Trollop::options do
>+  
>+  banner <<-EOS
>+Creates a review object on a commit
>+
>+
>+EOS
>+
>+  opt :amend, "Change the last review committed"
>+  opt :log, "Display log history for all reviews done" 
>+  opt :respond, "Respond to a review"
>+  opt :show_raw, "Display raw review contents"
>+  opt :show_comments, "Displays the list of comments in a review object"
>+  opt :log_show, "Displays the log history for all reviews along with the raw content"
>+  opt :format, "Prepare reviews for email submissions"
>+end
>+
>+          
>+              
>+          if opts[:amend] ==true               
>+		
>+		review_log = `git review-log`
>+		review_log = review_log.split(/\n/)[1]
>+		review_hash = review_log.split[1]                        
>+		cmd = `git show #{review_hash}`
>+		tree_hash= cmd.lines.first
>+		tree_hash= tree_hash.split[1]             #Getting the tree the review belongs to
>+		value = `git show #{review_hash}`
>+		amended_hash = make_review(value)
>+		checkcontents = `git ls-tree review:#{tree_hash}`
>+		checkcontents = checkcontents + "100644 blob #{amended_hash}\t#{amended_hash}" 
>+                tree_hashT2_amend = create_treeT2(checkcontents)
>+		tree_contentsT1_amend = search(tree_hash,tree_hashT2_amend)
>+		tree_hashT1_amend = create_treeT1(tree_contentsT1_amend)
>+   		message_amend= "Amended Review #{review_hash}"
>+    	        command_amend= "git commit-tree #{tree_hashT1_amend} -p review"
>+                commit_tree(tree_hashT1_amend,message_amend,command_amend)
>+		exit
>+
>+           elsif opts[:log]==true
>+                
>+           
>+		review_log=`git review-log`
>+                puts review_log
>+                exit 
>+               
>+          elsif opts[:format]==true
>+                
>+           
>+                if ARGV.length ==0
>+                 puts " --format needs a review hash. Check git review --help"
>+                 exit
>+                end
>+               
>+                review_format = ARGV[0] 
>+               
>+		format =`git review-format #{review_format}`
>+                print format
>+                exit 
>+		
>+               
>+            elsif opts[:log_show]==true
>+                
>+		review_log_show=`git review-log-show`
>+                puts review_log_show
>+                exit
>+                
>+           elsif opts[:show_comments]==true
>+               
>+
>+                if ARGV.length ==0
>+                 puts " --show-comments needs a review hash. Check git review --help"
>+                 exit
>+                end
>+               
>+                review_comments = ARGV[0] 
>+               
>+		review_comments=`git comment #{review_comments}`
>+                print review_comments
>+                exit 
>+
>+            elsif opts[:show_raw]==true
>+            
>+                if ARGV.length ==0
>+                 puts " --show-raw needs a review hash. Check git review --help"
>+                 exit
>+                end
>+               
>+                review_raw = ARGV[0]
>+              
>+                get_tree = `git show #{review_raw}`
>+                tree_hash= get_tree.lines.first
>+                tree_hash= tree_hash.split[1] 
>+                
>+                reviewer_details = `git log -1 review  -- #{tree_hash}/#{review_raw}` 
>+                puts "Commit Reviewed: #{tree_hash}"
>+                print "Reviewer"
>+                puts reviewer_details[54..-1]
>+                review_show_raw= %x(git cat-file -p #{review_raw})
>+                puts review_show_raw
>+                 
>+                exit
>+
>+            elsif opts[:respond]==true
>+              
>+		 if ARGV.length ==0
>+                 puts " --respond needs a review hash. Check git review --help"
>+                 exit
>+                end
>+               
>+                review_respond = ARGV[0]  
>+                get_tree = `git show #{review_respond}`
>+                tree_hash= get_tree.lines.first
>+                tree_hash= tree_hash.split[1] 
>+                response=`git show #{review_respond}`
>+                review_hash_respond = make_review(response) 
>+                tree_contents_respond= `git ls-tree review:#{tree_hash}` 
>+	        tree_contents_respond = tree_contents_respond + "100644 blob #{review_hash_respond}\t#{review_hash_respond}"
>+                tree_hashT2_respond = create_treeT2(tree_contents_respond) 
>+                tree_contentsT1 = search(tree_hash,tree_hashT2_respond)
>+                tree_hashT1 = create_treeT1(tree_contentsT1)
>+                message_respond= "Response to #{review_respond}"
>+                command_respond= "git commit-tree #{tree_hashT1} -p review "
>+                commit_tree(tree_hashT1,message_respond,command_respond)
>+                exit                 
>+                
>+           end
>+
>+if ARGV.length == 1 
>+  commit_hash = ARGV[0]
>+  cmd = "git log -u -1 #{commit_hash}"
>+else
>+  cmd = "git diff "
>+  
>+end
>+  
>+  value = `#{cmd}`
>+ 
>+  
>+if value.length==0
>+  puts " Review object cannot be created. Check git review --help "
>+  exit
>+end
>+
>+value.gsub!(/^/, ">")           #putting in chevrons at the beginning of every line
>+review_hash = make_review(value)  
>+
>+
>+
>+check_tree = `git ls-tree review`
>+t="100644 blob #{review_hash}\t#{review_hash}"
>+
>+
>+
>+#A - making a review for the first time
>+
>+ if check_tree.length==0
>+  
>+  tree_hashT2A = create_treeT2(t)
>+  createT1A = "040000 tree #{tree_hashT2A}\t#{commit_hash}\n"
>+  tree_hashT1A= create_treeT1(createT1A)  
>+  messageA = "This is the first review on any commit"
>+  commandA = "git commit-tree #{tree_hashT1A}"
>+  commit_tree(tree_hashT1A,messageA,commandA)
>+
>+
>+  
>+
>+#B making a review on a new commit
>+ else
>+   
>+    checkcontents = `git ls-tree review | grep #{commit_hash} `
>+ 
>+    if checkcontents.length==0
>+      tree_hashT2B = create_treeT2(t) 
>+      check_tree= check_tree + "040000 tree #{tree_hashT2B}\t#{commit_hash}"
>+      tree_hashT1B = create_treeT1(check_tree)
>+      messageB = "This is the first review on this commit"
>+      commandB = "git commit-tree #{tree_hashT1B} -p review"
>+      commit_tree(tree_hashT1B,messageB,commandB)
>+  
>+     
>+
>+  
>+#C making a multiple review on same commit
>+  else
>+     
>+     tree_contents= `git ls-tree review:#{commit_hash}` 
>+     tree_contents = tree_contents + "100644 blob #{review_hash}\t#{review_hash}"
>+     tree_hashT2C = create_treeT2(tree_contents)    
>+     tree_contentsT1C = search(commit_hash,tree_hashT2C)
>+     tree_hashT1C = create_treeT1(tree_contentsT1C)
>+     messageC= "This commit has been reviewed before"
>+     commandC= "git commit-tree #{tree_hashT1C} -p review "
>+     commit_tree(tree_hashT1C,messageC,commandC)
>+
>+ 
>+  
>+      
>+
>+end   
>+end   
>+
>+
>+
>+
>+
>+
>+
>+
>+
>+
>+
>+
>+
>+
>+ 
>diff --git a/git-review-format b/git-review-format
>new file mode 100755
>index 0000000..e6c53ee
>--- /dev/null
>+++ b/git-review-format
>@@ -0,0 +1,56 @@
>+#!/usr/bin/env ruby
>+#!bin/sh
>+
>+puts "hello"
>+review_hash=ARGV[0]
>+show = `git review --show-raw #{review_hash}`
>+
>+
>+from = show.split(/\n/)
>+date = from[2]
>+
>+from =from[1].split(/:/)
>+format = "From: " + from[1] +"\n"
>+
>+
>+subject = show.split(/@@/)
>+subject = subject[2].split(/\n/)
>+subject = subject[1]
>+
>+
>+format= format + "Subject: " + "[PATCH] " + subject + "\n"
>+
>+
>+format= format + date + "\n\n---\n"
>+find = `git review-log`
>+find = find.split("\n").map {|row| row.split()}
>+
>+matched_rowindex=find.find_index {|row| row[1]==review_hash}
>+
>+matched_rowindex=matched_rowindex + 2
>+
>+
>+commit = find[matched_rowindex][1]
>+
>+
>+stat = `git log --stat -1 #{commit}`
>+stat= stat.split(/\n/)
>+length = stat.length
>+stat = stat[6..length]
>+stat = stat.join("\n") 
>+
>+
>+format = format + stat + "\n"
>+
>+body = show.split(/commit\s\w{40}/)
>+
>+format = format + body[1] + "\n--\n"
>+pwd = `pwd`
>+puts pwd
>+version = `git version`
>+version= version.split(/git version/)
>+format = format + version[1]
>+#print format
>+File.open("/home/m_mukadam/murtuzareview/#{review_hash}.patch", 'w') { |file| file.write(format) }
>+
>+%x{gvim #{"/home/m_mukadam/murtuzareview/#{review_hash}.patch"}}
>diff --git a/git-review-log b/git-review-log
>new file mode 100755
>index 0000000..0e6ed88
>--- /dev/null
>+++ b/git-review-log
>@@ -0,0 +1,58 @@
>+#!/usr/bin/perl
>+
>+foreach my $rev (`git rev-list review --pretty=oneline`) {
>+   
>+  ($sha=$rev) =~ s/\s.*$//;
>+   
>+  foreach my $blob (`git log --numstat -1 $sha`) {
>+ 
>+my @values = (split('\t', $blob))[2];
>+
>+  foreach my $val1 (@values) {
>+
>+
>+          my @values1 = (split('\/', $val1))[0];
>+           $val1 = (split('\/', $blob))[1];
>+         
>+          print "\nReview ";
>+         
>+          print $val1;
>+
>+
>+foreach my $val (@values1) {
>+ 
>+      print "commit Reviewed ";
>+      print "$val\n";
>+ }
>+
>+
>+}
>+  
>+  }
>+   
>+   my $log = `git log -1 $sha`;
>+
>+   
>+   my $log_amend = (split('Amended Review', $log))[1];
>+   my $log_response = (split('Response to', $log))[1];
>+   my $removemessage = (split('\n\n', $log))[0];
>+   
>+  
>+   print "$removemessage\n";
>+   
>+   if($log_amend)
>+    {
>+      print "Amended Review"; 
>+       print "$log_amend";
>+    }
>+   
>+
>+    
>+   if($log_response)
>+    {
>+      print "Response to"; 
>+       print "$log_response";
>+    }
>+    
>+   
>+}
>diff --git a/git-review-log-show b/git-review-log-show
>new file mode 100755
>index 0000000..eb395d4
>--- /dev/null
>+++ b/git-review-log-show
>@@ -0,0 +1,44 @@
>+#!/usr/bin/perl 
>+
>+
>+foreach my $rev (`git rev-list review --pretty=oneline`) {
>+   
>+  ($sha=$rev) =~ s/\s.*$//;
>+   
>+  foreach my $blob (`git log --numstat -1 $sha`) {
>+ 
>+my @values = (split('\t', $blob))[2];
>+
>+  foreach my $val1 (@values) {
>+
>+
>+          my @values1 = (split('\/', $val1))[0];
>+           $val1 = (split('\/', $blob))[1];
>+         
>+          print "\n\n\nReview ";
>+         
>+          print $val1;
>+          my $get_tree = `git cat-file -p $val1`;
>+          print $get_tree;
>+          
>+
>+          
>+
>+foreach my $val (@values1) {
>+ 
>+      print "commit Reviewed ";
>+      print "$val\n";
>+ }
>+
>+
>+}
>+  
>+  }
>+
>+  
>+   my $log = `git log -1 $sha`;
>+    my $removemessage = (split('\n\n', $log))[0];
>+ print "$removemessage\n";
>+   
>+}
>+
>diff --git a/git-review.html b/git-review.html
>new file mode 100644
>index 0000000..604cef9
>--- /dev/null
>+++ b/git-review.html
>@@ -0,0 +1,239 @@
>+<!DOCTYPE html>
>+<html>
>+<head>
>+  <meta http-equiv='content-type' value='text/html;charset=utf8'>
>+ 
>+  <title>git-review(1) - Create a Review Object</title>
>+  <style type='text/css' media='all'>
>+  /* style: man */
>+  body#manpage {margin:0}
>+  .mp {max-width:190ex;padding:0 9ex 1ex 4ex}
>+  .mp p,.mp pre,.mp ul,.mp ol,.mp dl {margin:0 0 20px 0}
>+  .mp h2 {margin:10px 0 0 0}
>+  .mp > p,.mp > pre,.mp > ul,.mp > ol,.mp > dl {margin-left:8ex}
>+  .mp h3 {margin:0 0 0 4ex}
>+  .mp dt {margin:0;clear:left}
>+  .mp dt.flush {float:left;width:8ex}
>+  .mp dd {margin:0 0 0 9ex}
>+  .mp h1,.mp h2,.mp h3,.mp h4 {clear:left}
>+  .mp pre {margin-bottom:20px}
>+  .mp pre+h2,.mp pre+h3 {margin-top:22px}
>+  .mp h2+pre,.mp h3+pre {margin-top:5px}
>+  .mp img {display:block;margin:auto}
>+  .mp h1.man-title {display:none}
>+  .mp,.mp code,.mp pre,.mp tt,.mp kbd,.mp samp,.mp h3,.mp h4 {font-family:monospace;font-size:14px;line-height:1.42857142857143}
>+  .mp h2 {font-size:16px;line-height:1.25}
>+  .mp h1 {font-size:20px;line-height:2}
>+  .mp {text-align:justify;background:#fff}
>+  .mp,.mp code,.mp pre,.mp pre code,.mp tt,.mp kbd,.mp samp {color:#131211}
>+  .mp h1,.mp h2,.mp h3,.mp h4 {color:#030201}
>+  .mp u {text-decoration:underline}
>+  .mp code,.mp strong,.mp b {font-weight:bold;color:#131211}
>+  .mp em,.mp var {font-style:italic;color:#232221;text-decoration:none}
>+  .mp a,.mp a:link,.mp a:hover,.mp a code,.mp a pre,.mp a tt,.mp a kbd,.mp a samp {color:#0000ff}
>+  .mp b.man-ref {font-weight:normal;color:#434241}
>+  .mp pre {padding:0 4ex}
>+  .mp pre code {font-weight:normal;color:#434241}
>+  .mp h2+pre,h3+pre {padding-left:0}
>+  ol.man-decor,ol.man-decor li {margin:3px 0 10px 0;padding:0;float:left;width:33%;list-style-type:none;text-transform:uppercase;color:#999;letter-spacing:1px}
>+  ol.man-decor {width:100%}
>+  ol.man-decor li.tl {text-align:left}
>+  ol.man-decor li.tc {text-align:center;letter-spacing:4px}
>+  ol.man-decor li.tr {text-align:right;float:right}
>+  </style>
>+</head>
>+<!--
>+  The following styles are deprecated and will be removed at some point:
>+  div#man, div#man ol.man, div#man ol.head, div#man ol.man.
>+
>+  The .man-page, .man-decor, .man-head, .man-foot, .man-title, and
>+  .man-navigation should be used instead.
>+-->
>+<body id='manpage'>
>+  <div class='mp' id='man'>
>+
>+  <div class='man-navigation' style='display:none'>
>+    <a href="#NAME">NAME</a>
>+    <a href="#SYNOPSIS">SYNOPSIS</a>
>+    <a href="#DESCRIPTION">DESCRIPTION</a>
>+    <a href="#OPTIONS">OPTIONS</a>
>+    <a href="#EXAMPLES">EXAMPLES</a>
>+    <a href="#AUTHOR">AUTHOR</a>
>+    <a href="#REPORTING-BUGS">REPORTING BUGS</a>
>+    <a href="#SEE-ALSO">SEE ALSO</a>
>+  </div>
>+
>+  <ol class='man-decor man-head man head'>
>+    <li class='tl'>git-review(1)</li>
>+    <li class='tc'></li>
>+    <li class='tr'>git-review(1)</li>
>+  </ol>
>+
>+  <h2 id="NAME">NAME</h2>
>+<p class="man-name">
>+  <code>git-review</code> - <span class="man-whatis">Creates a review on a commit</span>
>+</p>
>+
>+<h2 id="SYNOPSIS">SYNOPSIS</h2>
>+
>+<p><code>git-review</code> [=&lt;<em>commit-hash</em>&gt;] [--log] [--amend] [--show-raw=&lt;review-hash&gt;] [--respond==&lt;review-hash&gt;] [--show-comments==&lt;review-hash&gt;] [--format==&lt;review-hash&gt;]</p>
>+
>+<h2 id="DESCRIPTION">DESCRIPTION</h2>
>+
>+<p>  Creates a review on a given <em>commit-hash</em>.</p>
>+
>+<h2 id="OPTIONS">OPTIONS</h2>
>+
>+<p>  &lt;log&gt;</p> 
>+
>+<p>  Shows the log history of the reviews made along with the reviewer details.</p>
>+
>+<p>  &lt;log-show&gt;</p> 
>+
>+<p>  Shows the log history of the reviews made along with raw review content.</p>
>+
>+<p>  &lt;amend&gt;</p>
>+
>+<p>  Allows reviewer to make any change to the last review.</p>
>+
>+<p>  &lt;show-raw&gt;  <em>review-hash</em> </p>
>+
>+<p>  Shows the contents of the review object.</p>
>+
>+<p>  &lt;format&gt;  <em>review-hash</em> </p>
>+
>+<p> Prepares the review for an email submission</p>
>+
>+<p>  &lt;respond&gt;  <em>review-hash</em> </p>
>+
>+<p>  Allows reviewer to respond to any review</p>
>+
>+<p>  &lt;show-comments&gt;  <em>review-hash</em> </p>
>+
>+<p>  Displays list of comments made on the review object</p>
>+
>+<h2 id="EXAMPLES">EXAMPLES</h2>
>+
>+
>+<pre><code>$ git review <em>commit-hash</em>
>+... Creating a review object on a particular commit
>+Creating Review Object
>+5c1b78028dca1b7424b5d6a0c888fa829236cda2
>+
>+
>+
>+$ git review --log
>+...shows the log history of the reviews made
>+Review b88a0c3b2c8a5924acefdb99fb50bff3a2dfe7ff
>+commit Reviewed 02f8efec7e50c925924bbe3a6160de0a82e8b724
>+Response to 921b762aad203dca6e265b2658c7c3c0566c702a
>+commit 3172364ddc0eafdcdf88275e4c56867fd748a8c4
>+Author: Murtuza Mukadam <murtuza16289@gmail.com>
>+Date:   Fri Jun 21 23:50:50 2013 -0400
>+
>+$ git review --log-show
>+...shows the log history of the reviews made along with the review content
>+Review dc0a9fbf5030a824e29657618d5184749aaaf422
>+
>+<i>content</i>
>+
>+commit Reviewed 02f8efec7e50c925924bbe3a6160de0a82e8b724
>+commit 3addb240fc1ed0fce6f1fc72915d6575fcbfe475
>+Author: Murtuza Mukadam <murtuza16289@gmail.com>
>+Date:   Fri Jun 21 23:33:03 2013 -0400
>+
>+
>+
>+$ git review --amend 
>+... allows to make a change to the review
>+Amending Review Object
>+838a2d22de4d0bb393f2874bc92734a073757fea
>+
>+
>+
>+$ git review --show-raw <em>review-hash</em>
>+... shows the raw content of the review object
>+Commit Reviewed: 02f8efec7e50c925924bbe3a6160de0a82e8b724
>+Reviewer: Murtuza Mukadam <murtuza16289@gmail.com>
>+Date:   Wed Jun 19 18:40:38 2013 -0400
>+
>+<i>content</i>
>+
>+
>+
>+
>+$ git review --respond <em>review-hash</em>
>+... allows reviewer to respond to a review
>+Creating Response Review Object
>+b3a3becba4b947a381c53a8444ac239b57acd6b0
>+
>+
>+
>+$ git review --show-comments <em>review-hash</em>
>+... allows reviewer to list the comments made on the review object
>+Review on commit 02f8efec7e50c925924bbe3a6160de0a82e8b724
>+
>+Comment starting at line 6:
>+
>+this is not correct
>+
>+
>+Comment starting at line 10:
>+it should be a running script
>+
>+
>+
>+$ git review --format <em>review-hash</em>
>+... prepares the review for an email submission
>+
>+From:  Murtuza Mukadam <murtuza16289@gmail.com>
>+Subject: [PATCH] >>+#!/usr/bin/env ruby
>+Date:   Fri Jun 21 23:50:50 2013 -0400
>+
>+---
>+ .../b88a0c3b2c8a5924acefdb99fb50bff3a2dfe7ff       | 62 ++++++++++++++++++++++
>+ 1 file changed, 62 insertions(+)
>+
>+>>Author: Murtuza Mukadam <murtuza16289@gmail.com>
>+>>Date:   Fri May 31 22:31:38 2013 -0400
>+>>
>+>>    This is my second commit
>+>>
>+>>diff --git a/git-review.txt b/git-review.txt
>+>>new file mode 100644
>+>>index 0000000..5695fd9
>+>>--- /dev/null
>+>>+++ b/git-review.txt
>+>>@@ -0,0 +1,48 @@
>+>>+#!/usr/bin/env ruby
>+>>+
>+>>+cmd = "git diff"
>+>>+value = `git diff`
>+
>+--
>+ 1.8.1.msysgit.
>+
>+</code></pre>
>+
>+<h2 id="AUTHOR">AUTHOR</h2>
>+
>+<p>Written by Murtuza Mukadam &lt;<a href="http://users.encs.concordia.ca/~m_mukada/" data-bare-link="true"> users.encs.concordia.ca/~m_mukada/</a>&gt;</p>
>+
>+<h2 id="REPORTING-BUGS">REPORTING BUGS</h2>
>+
>+<p>&lt;<a href="https://github.com/mmukadam/git-review/issues" data-bare-link="true">https://github.com/mmukadam/git-review/issues</a>&gt;</p>
>+
>+<h2 id="SEE-ALSO">SEE ALSO</h2>
>+
>+<p>&lt;<a href="https://github.com/mmukadam/git-review/" data-bare-link="true">https://github.com/mmukadam/git-review/</a>&gt;</p>
>+
>+
>+  <ol class='man-decor man-foot man foot'>
>+    <li class='tl'></li>
>+    <li class='tc'>June 2013</li>
>+    <li class='tr'>git-review(1)</li>
>+  </ol>
>+
>+  </div>
>+</body>
>+</html>
>\ No newline at end of file
>diff --git a/scripts/git-comment b/scripts/git-comment
>deleted file mode 100644
>index 4439bc4..0000000
>--- a/scripts/git-comment
>+++ /dev/null
>@@ -1,86 +0,0 @@
>- #!/usr/bin/perl
>-
>-
>-
>-my $review_hash=$ARGV[0];
>-
>-my $show=`git show $review_hash`;
>-
>-
>-
>-my $inside_diff = 0;
>-my $pos = 1;
>-my $comment;
>-my $comment1;
>-
>-
>-open my $showHandle, '<', \$show;
>-
>-while(my $line = <$showHandle>) {
>-       
>-       
>- 
>-	if($line =~ />commit\s (\w{40})/xms) {
>-		print "\nReview on commit $1\n";
>-		$inside_diff = 0;
>-	}
>-	#elsif($line =~ /^>diff\s --git\s a(.*?)\s b(.*?)$/xms) {
>-	#	print "\nold file = $1 -- new file = $2\n";
>-	#}
>-	elsif($line =~ /^>\@\@\s -(\d+)\s \+(\d+),(\d+)/xms) {
>-		$inside_diff = 1;
>-	#	print "\nold position $1 to $2 -- new position $3 to $4\n";
>-		$pos = 1;
>-	}
>-
>-     elsif($line =~ /^>\@\@\s -(\d+),(\d+)\s \+(\d+),(\d+)(\d+)/xms) {
>-		$inside_diff = 1;
>-		#print "\nold position $1 to $2 -- new position $3 to $4\n";
>-		$pos = 1;
>-	}
>-
>-
>-        elsif($line =~ /^>\@\@\s -(\d+)(\d+),(\d+)\s \+(\d+)(\d+),(\d+)/xms) {
>-                 $inside_diff = 1;
>-		#print "\nold position $1 to $2 -- new position $3 to $4\n";
>-		$pos = 1;
>-          }
>-
>-         elsif($line =~ /^>\@\@\s -(\d+)\s \+(\d+),(\d+)(\d+)/xms) {
>-
>-               $inside_diff = 1;
>-		#print "\nold position $1 to $2 -- new position $3 to $4\n";
>-		$pos = 1;
>-             }
>-
>-           elsif($line =~ /^>\@\@\s -(\d+)(\d+),(\d+)(\d+)\s \+(\d+)(\d+),(\d+)/xms) {
>-
>-             $inside_diff = 1;
>-		#print "\nold position $1 to $2 -- new position $3 to $4\n";
>-		$pos = 1;
>-          }
>-
>-	#found a comment
>-	elsif($inside_diff == 1 and $line =~ /^[^>+ >-]/) {
>-		$comment .= $line;
>-                $comment1 .=$line;
>-                 
>-	}
>-	elsif($inside_diff == 1) {
>-		if (defined $comment) {
>-			print "\nComment starting at line $pos:\n $comment\n";
>-			$comment = undef;
>-		}
>-		$pos ++;
>-	}
>-}
>-
>-
>-
>-
>-
>-
>-
>-
>-
>-
>diff --git a/scripts/git-review b/scripts/git-review
>deleted file mode 100644
>index 8c3334a..0000000
>--- a/scripts/git-review
>+++ /dev/null
>@@ -1,275 +0,0 @@
>-#!/usr/bin/env ruby
>-#!/bin/sh
>-
>-
>-
>-require 'rubygems'
>-require "trollop"
>-require "open3"
>-include Open3
>-
>-opts = Trollop::options do
>-  
>-  banner <<-EOS
>-Creates a review object on a commit
>-
>-
>-EOS
>-
>-  opt :amend, "Change the last review committed"
>-  opt :log, "Display log history for all reviews done" 
>-  opt :respond, "Respond to a review"
>-  opt :show_raw, "Display raw review contents"
>-  opt :show_comments, "Displays the list of comments in a review object"
>-   opt :log_show, "Displays the log history for all reviews along with the raw content"
>-   opt :format, "Prepare reviews for email submissions"
>-end
>-
>-          
>-              
>-          if opts[:amend] ==true
>-		
>-	        review_amend=`git review-amend`
>-                puts review_amend
>-                exit
>-               
>-           elsif opts[:log]==true
>-                
>-           
>-		review_log=`git review-log`
>-                puts review_log
>-                exit 
>-               
>-          elsif opts[:format]==true
>-                
>-           
>-                if ARGV.length ==0
>-                 puts " --format needs a review hash. Check git review --help"
>-                 exit
>-                end
>-               
>-                review_format = ARGV[0] 
>-               
>-		format =`git review-format #{review_format}`
>-                print format
>-                exit 
>-		
>-               
>-            elsif opts[:log_show]==true
>-                
>-		review_log_show=`git review-log-show`
>-                puts review_log_show
>-                exit
>-                
>-           elsif opts[:show_comments]==true
>-               
>-
>-                if ARGV.length ==0
>-                 puts " --show-comments needs a review hash. Check git review --help"
>-                 exit
>-                end
>-               
>-                review_comments = ARGV[0] 
>-               
>-		review_comments=`git comment #{review_comments}`
>-                print review_comments
>-                exit 
>-
>-            elsif opts[:show_raw]==true
>-            
>-                if ARGV.length ==0
>-                 puts " --show-raw needs a review hash. Check git review --help"
>-                 exit
>-                end
>-               
>-                review_raw = ARGV[0]
>-              
>-                get_tree = `git show #{review_raw}`
>-                tree_hash= get_tree.lines.first
>-                tree_hash= tree_hash.split[1] 
>-                
>-                reviewer_details = `git log -1 review  -- #{tree_hash}/#{review_raw}` 
>-                puts "Commit Reviewed: #{tree_hash}"
>-                print "Reviewer"
>-                puts reviewer_details[54..-1]
>-                review_show_raw= %x(git cat-file -p #{review_raw})
>-                puts review_show_raw
>-                 
>-                exit
>-
>-            elsif opts[:respond]==true
>-              
>-		 if ARGV.length ==0
>-                 puts " --respond needs a review hash. Check git review --help"
>-                 exit
>-                end
>-               
>-                review_respond = ARGV[0]  
>-                get_tree = `git show #{review_respond}`
>-                tree_hash= get_tree.lines.first
>-                tree_hash= tree_hash.split[1] 
>-                
>-                response=`git show #{review_respond}`
>-                response.gsub!(/^/, ">")           #putting in chevrons at the beginning of every line
>-		puts 
>-		File.open('C:\Users\Murtuza\murtuza9\review.tmp', 'w') { |file| file.write(response) }
>-		%x{call #{'C:\Users\Murtuza\murtuza9\review.tmp'}}
>-                create_review = "git hash-object -w review.tmp"
>-		review_hash_respond = `#{create_review}`
>-		review_hash_respond = review_hash_respond.strip
>-		puts "Creating Response Review Object"
>-		puts review_hash_respond
>-               
>- 
>-
>-
>-                 tree_contents_respond= `git ls-tree review:#{tree_hash}` 
>-	         tree_contents_respond = tree_contents_respond + "100644 blob #{review_hash_respond}\t#{review_hash_respond}"
>-     
>-    		 stdin6, stdout6, stderr6 = Open3.popen3("git mktree")
>-     		 stdin6.write tree_contents_respond
>-     		 stdin6.close
>-     		 tree_hashT2_respond = stdout6.read().strip
>-              
>-                 checkreviewcontents = `git ls-tree review  `
>-  
>-  		checkreviewcontents= checkreviewcontents.split("\n").map {|row| row.split()}
>-  		matched_rowindex=checkreviewcontents.find_index {|row| row[3]==tree_hash}
>-  		checkreviewcontents[matched_rowindex][2]= tree_hashT2_respond
>-  		tree_contentsT1=checkreviewcontents.map{|line| line[0..2].join(" ") + "\t" + line[3]}.join "\n"
>-  		stdin7, stdout7, stderr7 = Open3.popen3("git mktree")
>-  		stdin7.write tree_contentsT1
>-  		stdin7.close
>-  
>-  		tree_hashT1 = stdout7.read()
>-  		commit_treeT1 = `git commit-tree -m "Response to #{review_respond}" -p review #{tree_hashT1}`  
>-  		commit_treeT1 = commit_treeT1.strip
>-  		createreviewbranch = ` git branch -f review #{commit_treeT1}`
>-      
>-	        exit
>-
>-                 
>-                
>-           end
>-
>-if ARGV.length == 1 
>-  commit_hash = ARGV[0]
>-  cmd = "git log -u -1 #{commit_hash}"
>-else
>-  cmd = "git diff "
>-  
>-end
>-  
>-  value = `#{cmd}`
>- 
>-  
>-if value.length==0
>-  puts " Review object cannot be created. Check git review --help "
>-  exit
>-end
>-
>-
>-   
>-value.gsub!(/^/, ">")           #putting in chevrons at the beginning of every line
>-puts 
>-File.open('C:\Users\Murtuza\murtuza9\review.tmp', 'w') { |file| file.write(value) }
>-%x{call #{'C:\Users\Murtuza\murtuza9\review.tmp'}}
>-create_review = "git hash-object -w review.tmp"
>-review_hash = `#{create_review}`
>-review_hash = review_hash.strip
>-puts "Creating Review Object"
>-puts review_hash
>-   
>-
>-
>-check_tree = `git ls-tree review`
>-t="100644 blob #{review_hash}\t#{review_hash}"
>-
>-
>-
>-#A - making a review for the first time
>-
>-if check_tree.length==0
>-  
>-  stdin, stdout, stderr = Open3.popen3("git mktree")
>-  stdin.write t
>-  stdin.close
>-  tree_hashT2A = stdout.read().strip
>-  
>-  stdout.close
>-  
>-  
>-  createT1A = "040000 tree #{tree_hashT2A}\t#{commit_hash}\n"
>-  stdin1, stdout1, stderr1 = Open3.popen3("git mktree")
>-  stdin1.write createT1A
>-  stdin1.close
>-  tree_hashT1A = stdout1.read()
>-  
>-  commit_treeT1A = `git commit-tree -m "Review for the first time" #{tree_hashT1A}`
>-  commit_treeT1A=commit_treeT1A.strip
>-  createreviewbranch = ` git branch -f review #{commit_treeT1A}`
>-
>-
>-#B making a review on a new commit
>- else
>-   
>-  checkcontents = `git ls-tree review | grep #{commit_hash} `
>- 
>-  if checkcontents.length==0
>-  
>-  stdin2, stdout2, stderr2 = Open3.popen3("git mktree")
>-  stdin2.write t
>-  stdin2.close
>-  tree_hashT2B = stdout2.read().strip
>-  stdout2.close
>-
>-  check_tree = check_tree + "040000 tree #{tree_hashT2B}\t#{commit_hash}"
>-  stdin3, stdout3, stderr3 = Open3.popen3("git mktree")
>-  stdin3.write check_tree
>-  stdin3.close
>-  
>-  tree_hashT1B = stdout3.read()
>-  stderr3.read()
>-  commit_treeT1B = `git commit-tree -m "Review on a commit never reviewed before" -p review #{tree_hashT1B}`
>-  commit_treeT1B = commit_treeT1B.strip
>-  createreviewbranch = ` git branch -f review #{commit_treeT1B}`
>-     
>-
>-  
>-#C making a multiple review on same commit
>-  else
>-     
>-     tree_contents= `git ls-tree review:#{commit_hash}` 
>-     tree_contents = tree_contents + "100644 blob #{review_hash}\t#{review_hash}"
>-     
>-     stdin4, stdout4, stderr4 = Open3.popen3("git mktree")
>-     stdin4.write tree_contents
>-     stdin4.close
>-     tree_hashT2C = stdout4.read().strip
>-  
>-
>-  checkreviewcontents = `git ls-tree review  `
>-  
>-  checkreviewcontents= checkreviewcontents.split("\n").map {|row| row.split()}
>-  matched_rowindex=checkreviewcontents.find_index {|row| row[3]==commit_hash}
>-  checkreviewcontents[matched_rowindex][2]= tree_hashT2C
>-  tree_contentsT1C=checkreviewcontents.map{|line| line[0..2].join(" ") + "\t" + line[3]}.join "\n"
>-  stdin5, stdout5, stderr5 = Open3.popen3("git mktree")
>-  stdin5.write tree_contentsT1C
>-  stdin5.close
>-  
>-  tree_hashT1C = stdout5.read()
>-  commit_treeT1C = `git commit-tree -m "This commit has been reviewed before" -p review #{tree_hashT1C}`  
>-  commit_treeT1C = commit_treeT1C.strip
>-  createreviewbranch = ` git branch -f review #{commit_treeT1C}`
>-      
>-
>-  
>-   
>-
>-
>-end   
>-end   
>-
>-
>- 
>\ No newline at end of file
>diff --git a/scripts/git-review-amend b/scripts/git-review-amend
>deleted file mode 100644
>index 2173701..0000000
>--- a/scripts/git-review-amend
>+++ /dev/null
>@@ -1,21 +0,0 @@
>-#!/usr/bin/env ruby
>-#!/bin/sh
>-
>-
>-require 'rubygems'
>-require "trollop"
>-require "open3"
>-include Open3
>-
>-review_log = `git review-log`
>-
>-first_line = review_log.split(/\n/)
>-print first_line[1]
>-review_hash = first_line.split[1]         #Getting the print "hello"
>-print review_hash
>-                  
>-cmd = `git show #{review_hash}`
>-tree_hash= cmd.lines.first
>-tree_hash= tree_hash.split[1]             #Getting the tree the review belongs to
>-
>-   
>diff --git a/scripts/git-review-format b/scripts/git-review-format
>deleted file mode 100644
>index c4632a7..0000000
>--- a/scripts/git-review-format
>+++ /dev/null
>@@ -1,55 +0,0 @@
>-#!/usr/bin/env ruby
>-#!/bin/sh
>-
>-
>-
>-review_hash=ARGV[0]
>-show = `git review --show-raw #{review_hash}`
>-
>-
>-from = show.split(/\n/)
>-date = from[2]
>-
>-from =from[1].split(/:/)
>-format = "From: " + from[1] +"\n"
>-
>-
>-subject = show.split(/@@/)
>-subject = subject[2].split(/\n/)
>-subject = subject[1]
>-
>-
>-format= format + "Subject: " + "[PATCH] " + subject + "\n"
>-
>-
>-format= format + date + "\n\n---\n"
>-find = `git review-log`
>-find = find.split("\n").map {|row| row.split()}
>-
>-matched_rowindex=find.find_index {|row| row[1]==review_hash}
>-
>-matched_rowindex=matched_rowindex + 2
>-
>-
>-commit = find[matched_rowindex][1]
>-
>-
>-stat = `git log --stat -1 #{commit}`
>-stat= stat.split(/\n/)
>-length = stat.length
>-stat = stat[6..length]
>-stat = stat.join("\n") 
>-
>-
>-format = format + stat + "\n"
>-
>-body = show.split(/commit\s\w{40}/)
>-
>-format = format + body[1] + "\n--\n"
>-
>-version = `git version`
>-version= version.split(/git version/)
>-format = format + version[1]
>-File.open("C:\\Users\\Murtuza\\murtuza9\\#{review_hash}.patch", 'w') { |file| file.write(format) }
>-
>-%x{call #{"C:\\Users\\Murtuza\\murtuza9\\#{review_hash}.patch"}}
>\ No newline at end of file
>diff --git a/scripts/git-review-log b/scripts/git-review-log
>deleted file mode 100644
>index 0e6ed88..0000000
>--- a/scripts/git-review-log
>+++ /dev/null
>@@ -1,58 +0,0 @@
>-#!/usr/bin/perl
>-
>-foreach my $rev (`git rev-list review --pretty=oneline`) {
>-   
>-  ($sha=$rev) =~ s/\s.*$//;
>-   
>-  foreach my $blob (`git log --numstat -1 $sha`) {
>- 
>-my @values = (split('\t', $blob))[2];
>-
>-  foreach my $val1 (@values) {
>-
>-
>-          my @values1 = (split('\/', $val1))[0];
>-           $val1 = (split('\/', $blob))[1];
>-         
>-          print "\nReview ";
>-         
>-          print $val1;
>-
>-
>-foreach my $val (@values1) {
>- 
>-      print "commit Reviewed ";
>-      print "$val\n";
>- }
>-
>-
>-}
>-  
>-  }
>-   
>-   my $log = `git log -1 $sha`;
>-
>-   
>-   my $log_amend = (split('Amended Review', $log))[1];
>-   my $log_response = (split('Response to', $log))[1];
>-   my $removemessage = (split('\n\n', $log))[0];
>-   
>-  
>-   print "$removemessage\n";
>-   
>-   if($log_amend)
>-    {
>-      print "Amended Review"; 
>-       print "$log_amend";
>-    }
>-   
>-
>-    
>-   if($log_response)
>-    {
>-      print "Response to"; 
>-       print "$log_response";
>-    }
>-    
>-   
>-}
>diff --git a/scripts/git-review-log-show b/scripts/git-review-log-show
>deleted file mode 100644
>index eb395d4..0000000
>--- a/scripts/git-review-log-show
>+++ /dev/null
>@@ -1,44 +0,0 @@
>-#!/usr/bin/perl 
>-
>-
>-foreach my $rev (`git rev-list review --pretty=oneline`) {
>-   
>-  ($sha=$rev) =~ s/\s.*$//;
>-   
>-  foreach my $blob (`git log --numstat -1 $sha`) {
>- 
>-my @values = (split('\t', $blob))[2];
>-
>-  foreach my $val1 (@values) {
>-
>-
>-          my @values1 = (split('\/', $val1))[0];
>-           $val1 = (split('\/', $blob))[1];
>-         
>-          print "\n\n\nReview ";
>-         
>-          print $val1;
>-          my $get_tree = `git cat-file -p $val1`;
>-          print $get_tree;
>-          
>-
>-          
>-
>-foreach my $val (@values1) {
>- 
>-      print "commit Reviewed ";
>-      print "$val\n";
>- }
>-
>-
>-}
>-  
>-  }
>-
>-  
>-   my $log = `git log -1 $sha`;
>-    my $removemessage = (split('\n\n', $log))[0];
>- print "$removemessage\n";
>-   
>-}
>-
>diff --git a/scripts/git-review.html b/scripts/git-review.html
>deleted file mode 100644
>index 4f79589..0000000
>--- a/scripts/git-review.html
>+++ /dev/null
>@@ -1,239 +0,0 @@
>-<!DOCTYPE html>
>-<html>
>-<head>
>-  <meta http-equiv='content-type' value='text/html;charset=utf8'>
>- 
>-  <title>git-review(1) - Create a Review Object</title>
>-  <style type='text/css' media='all'>
>-  /* style: man */
>-  body#manpage {margin:0}
>-  .mp {max-width:190ex;padding:0 9ex 1ex 4ex}
>-  .mp p,.mp pre,.mp ul,.mp ol,.mp dl {margin:0 0 20px 0}
>-  .mp h2 {margin:10px 0 0 0}
>-  .mp > p,.mp > pre,.mp > ul,.mp > ol,.mp > dl {margin-left:8ex}
>-  .mp h3 {margin:0 0 0 4ex}
>-  .mp dt {margin:0;clear:left}
>-  .mp dt.flush {float:left;width:8ex}
>-  .mp dd {margin:0 0 0 9ex}
>-  .mp h1,.mp h2,.mp h3,.mp h4 {clear:left}
>-  .mp pre {margin-bottom:20px}
>-  .mp pre+h2,.mp pre+h3 {margin-top:22px}
>-  .mp h2+pre,.mp h3+pre {margin-top:5px}
>-  .mp img {display:block;margin:auto}
>-  .mp h1.man-title {display:none}
>-  .mp,.mp code,.mp pre,.mp tt,.mp kbd,.mp samp,.mp h3,.mp h4 {font-family:monospace;font-size:14px;line-height:1.42857142857143}
>-  .mp h2 {font-size:16px;line-height:1.25}
>-  .mp h1 {font-size:20px;line-height:2}
>-  .mp {text-align:justify;background:#fff}
>-  .mp,.mp code,.mp pre,.mp pre code,.mp tt,.mp kbd,.mp samp {color:#131211}
>-  .mp h1,.mp h2,.mp h3,.mp h4 {color:#030201}
>-  .mp u {text-decoration:underline}
>-  .mp code,.mp strong,.mp b {font-weight:bold;color:#131211}
>-  .mp em,.mp var {font-style:italic;color:#232221;text-decoration:none}
>-  .mp a,.mp a:link,.mp a:hover,.mp a code,.mp a pre,.mp a tt,.mp a kbd,.mp a samp {color:#0000ff}
>-  .mp b.man-ref {font-weight:normal;color:#434241}
>-  .mp pre {padding:0 4ex}
>-  .mp pre code {font-weight:normal;color:#434241}
>-  .mp h2+pre,h3+pre {padding-left:0}
>-  ol.man-decor,ol.man-decor li {margin:3px 0 10px 0;padding:0;float:left;width:33%;list-style-type:none;text-transform:uppercase;color:#999;letter-spacing:1px}
>-  ol.man-decor {width:100%}
>-  ol.man-decor li.tl {text-align:left}
>-  ol.man-decor li.tc {text-align:center;letter-spacing:4px}
>-  ol.man-decor li.tr {text-align:right;float:right}
>-  </style>
>-</head>
>-<!--
>-  The following styles are deprecated and will be removed at some point:
>-  div#man, div#man ol.man, div#man ol.head, div#man ol.man.
>-
>-  The .man-page, .man-decor, .man-head, .man-foot, .man-title, and
>-  .man-navigation should be used instead.
>--->
>-<body id='manpage'>
>-  <div class='mp' id='man'>
>-
>-  <div class='man-navigation' style='display:none'>
>-    <a href="#NAME">NAME</a>
>-    <a href="#SYNOPSIS">SYNOPSIS</a>
>-    <a href="#DESCRIPTION">DESCRIPTION</a>
>-    <a href="#OPTIONS">OPTIONS</a>
>-    <a href="#EXAMPLES">EXAMPLES</a>
>-    <a href="#AUTHOR">AUTHOR</a>
>-    <a href="#REPORTING-BUGS">REPORTING BUGS</a>
>-    <a href="#SEE-ALSO">SEE ALSO</a>
>-  </div>
>-
>-  <ol class='man-decor man-head man head'>
>-    <li class='tl'>git-review(1)</li>
>-    <li class='tc'></li>
>-    <li class='tr'>git-review(1)</li>
>-  </ol>
>-
>-  <h2 id="NAME">NAME</h2>
>-<p class="man-name">
>-  <code>git-review</code> - <span class="man-whatis">Creates a review on a commit</span>
>-</p>
>-
>-<h2 id="SYNOPSIS">SYNOPSIS</h2>
>-
>-<p><code>git-review</code> [=&lt;<em>commit-hash</em>&gt;] [--log] [--amend] [--show-raw=&lt;review-hash&gt;] [--respond==&lt;review-hash&gt;] [--show-comments==&lt;review-hash&gt;] [--format==&lt;review-hash&gt;]</p>
>-
>-<h2 id="DESCRIPTION">DESCRIPTION</h2>
>-
>-<p>  Creates a review on a given <em>commit-hash</em>.</p>
>-
>-<h2 id="OPTIONS">OPTIONS</h2>
>-
>-<p>  &lt;log&gt;</p> 
>-
>-<p>  Shows the log history of the reviews made along with the reviewer details.</p>
>-
>-<p>  &lt;log-show&gt;</p> 
>-
>-<p>  Shows the log history of the reviews made along with raw review content.</p>
>-
>-<p>  &lt;amend&gt;</p>
>-
>-<p>  Allows reviewer to make any change to the last review.</p>
>-
>-<p>  &lt;show-raw&gt;  <em>review-hash</em> </p>
>-
>-<p>  Shows the contents of the review object.</p>
>-
>-<p>  &lt;format&gt;  <em>review-hash</em> </p>
>-
>-<p> Prepares the review for an email submission</p>
>-
>-<p>  &lt;respond&gt;  <em>review-hash</em> </p>
>-
>-<p>  Allows reviewer to respond to any review</p>
>-
>-<p>  &lt;show-comments&gt;  <em>review-hash</em> </p>
>-
>-<p>  Displays list of comments made on the review object</p>
>-
>-<h2 id="EXAMPLES">EXAMPLES</h2>
>-
>-
>-<pre><code>$ git review <em>commit-hash</em>
>-... Creating a review object on a particular commit
>-Creating Review Object
>-5c1b78028dca1b7424b5d6a0c888fa829236cda2
>-
>-
>-
>-$ git review --log
>-...shows the log history of the reviews made
>-Review b88a0c3b2c8a5924acefdb99fb50bff3a2dfe7ff
>-commit Reviewed 02f8efec7e50c925924bbe3a6160de0a82e8b724
>-Response to 921b762aad203dca6e265b2658c7c3c0566c702a
>-commit 3172364ddc0eafdcdf88275e4c56867fd748a8c4
>-Author: Murtuza Mukadam <murtuza16289@gmail.com>
>-Date:   Fri Jun 21 23:50:50 2013 -0400
>-
>-$ git review --log-show
>-...shows the log history of the reviews made along with the review content
>-Review dc0a9fbf5030a824e29657618d5184749aaaf422
>-
>-<i>content</i>
>-
>-commit Reviewed 02f8efec7e50c925924bbe3a6160de0a82e8b724
>-commit 3addb240fc1ed0fce6f1fc72915d6575fcbfe475
>-Author: Murtuza Mukadam <murtuza16289@gmail.com>
>-Date:   Fri Jun 21 23:33:03 2013 -0400
>-
>-
>-
>-$ git review --amend 
>-... allows to make a change to the review
>-Amending Review Object
>-838a2d22de4d0bb393f2874bc92734a073757fea
>-
>-
>-
>-$ git review --show-raw <em>review-hash</em>
>-... shows the raw content of the review object
>-Commit Reviewed: 02f8efec7e50c925924bbe3a6160de0a82e8b724
>-Reviewer: Murtuza Mukadam <murtuza16289@gmail.com>
>-Date:   Wed Jun 19 18:40:38 2013 -0400
>-
>-<i>content</i>
>-
>-
>-
>-
>-$ git review --respond <em>review-hash</em>
>-... allows reviewer to respond to a review
>-Creating Response Review Object
>-b3a3becba4b947a381c53a8444ac239b57acd6b0
>-
>-
>-
>-$ git review --show-comments <em>review-hash</em>
>-... allows reviewer to list the comments made on the review object
>-Review on commit 02f8efec7e50c925924bbe3a6160de0a82e8b724
>-
>-Comment starting at line 6:
>-
>-this is not correct
>-
>-
>-Comment starting at line 10:
>-it should be a running script
>-
>-
>-
>-$ git review --format <em>review-hash</em>
>-... prepares the review for an email submission
>-
>-From:  Murtuza Mukadam <murtuza16289@gmail.com>
>-Subject: [PATCH] >>+#!/usr/bin/env ruby
>-Date:   Fri Jun 21 23:50:50 2013 -0400
>-
>----
>- .../b88a0c3b2c8a5924acefdb99fb50bff3a2dfe7ff       | 62 ++++++++++++++++++++++
>- 1 file changed, 62 insertions(+)
>-
>->>Author: Murtuza Mukadam <murtuza16289@gmail.com>
>->>Date:   Fri May 31 22:31:38 2013 -0400
>->>
>->>    This is my second commit
>->>
>->>diff --git a/git-review.txt b/git-review.txt
>->>new file mode 100644
>->>index 0000000..5695fd9
>->>--- /dev/null
>->>+++ b/git-review.txt
>->>@@ -0,0 +1,48 @@
>->>+#!/usr/bin/env ruby
>->>+
>->>+cmd = "git diff"
>->>+value = `git diff`
>-
>---
>- 1.8.1.msysgit.
>-
>-</code></pre>
>-
>-<h2 id="AUTHOR">AUTHOR</h2>
>-
>-<p>Written by Murtuza Mukadam &lt;<a href="http://users.encs.concordia.ca/~m_mukada/" data-bare-link="true"> users.encs.concordia.ca/~m_mukada/</a>&gt;</p>
>-
>-<h2 id="REPORTING-BUGS">REPORTING BUGS</h2>
>-
>-<p>&lt;<a href="https://github.com/mmukadam/git-review/issues" data-bare-link="true">https://github.com/mmukadam/git-review/issues</a>&gt;</p>
>-
>-<h2 id="SEE-ALSO">SEE ALSO</h2>
>-
>-<p>&lt;<a href="https://github.com/mmukadam/git-review/" data-bare-link="true">https://github.com/mmukadam/git-review/</a>&gt;</p>
>-
>-
>-  <ol class='man-decor man-foot man foot'>
>-    <li class='tl'></li>
>-    <li class='tc'>June 2013</li>
>-    <li class='tr'>git-review(1)</li>
>-  </ol>
>-
>-  </div>
>-</body>
>-</html>
>\ No newline at end of file
